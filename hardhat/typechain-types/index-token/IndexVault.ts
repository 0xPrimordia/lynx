/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IndexVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToken"
      | "admin"
      | "calculateRequiredDeposits"
      | "compositionTokens"
      | "controller"
      | "depositToken"
      | "getComposition"
      | "governanceActivated"
      | "governanceHook"
      | "indexToken"
      | "isCompositionToken"
      | "processMint"
      | "removeToken"
      | "setController"
      | "setGovernanceActivated"
      | "setGovernanceHook"
      | "setIndexToken"
      | "tokenWeights"
      | "totalWeight"
      | "updateTokenWeight"
      | "userDeposits"
      | "validateMint"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerSet"
      | "GovernanceActivated"
      | "GovernanceHookSet"
      | "IndexTokenSet"
      | "TokenAdded"
      | "TokenRemoved"
      | "TokenWeightUpdated"
      | "UserDeposit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compositionTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComposition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCompositionToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceActivated",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWeights",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenWeight",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMint",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compositionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompositionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMint",
    data: BytesLike
  ): Result;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controllerAddress: AddressLike];
  export type OutputTuple = [controllerAddress: string];
  export interface OutputObject {
    controllerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceActivatedEvent {
  export type InputTuple = [activated: boolean];
  export type OutputTuple = [activated: boolean];
  export interface OutputObject {
    activated: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceHookSetEvent {
  export type InputTuple = [hookAddress: AddressLike];
  export type OutputTuple = [hookAddress: string];
  export interface OutputObject {
    hookAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexTokenSetEvent {
  export type InputTuple = [indexToken: AddressLike];
  export type OutputTuple = [indexToken: string];
  export interface OutputObject {
    indexToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike, weight: BigNumberish];
  export type OutputTuple = [token: string, weight: bigint];
  export interface OutputObject {
    token: string;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWeightUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    oldWeight: BigNumberish,
    newWeight: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    oldWeight: bigint,
    newWeight: bigint
  ];
  export interface OutputObject {
    token: string;
    oldWeight: bigint;
    newWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserDepositEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IndexVault extends BaseContract {
  connect(runner?: ContractRunner | null): IndexVault;
  waitForDeployment(): Promise<this>;

  interface: IndexVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToken: TypedContractMethod<
    [_token: AddressLike, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  calculateRequiredDeposits: TypedContractMethod<
    [_mintAmount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;

  compositionTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  controller: TypedContractMethod<[], [string], "view">;

  depositToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getComposition: TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; weights: bigint[] }],
    "view"
  >;

  governanceActivated: TypedContractMethod<[], [boolean], "view">;

  governanceHook: TypedContractMethod<[], [string], "view">;

  indexToken: TypedContractMethod<[], [string], "view">;

  isCompositionToken: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  processMint: TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  setController: TypedContractMethod<
    [_controller: AddressLike],
    [void],
    "nonpayable"
  >;

  setGovernanceActivated: TypedContractMethod<
    [_activated: boolean],
    [void],
    "nonpayable"
  >;

  setGovernanceHook: TypedContractMethod<
    [_hook: AddressLike],
    [void],
    "nonpayable"
  >;

  setIndexToken: TypedContractMethod<
    [_indexToken: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenWeights: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  updateTokenWeight: TypedContractMethod<
    [_token: AddressLike, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  userDeposits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  validateMint: TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [_token: AddressLike, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [_mintAmount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "compositionTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getComposition"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; weights: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceActivated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "governanceHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "indexToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCompositionToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "processMint"
  ): TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setController"
  ): TypedContractMethod<[_controller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernanceActivated"
  ): TypedContractMethod<[_activated: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernanceHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIndexToken"
  ): TypedContractMethod<[_indexToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenWeights"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateTokenWeight"
  ): TypedContractMethod<
    [_token: AddressLike, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userDeposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateMint"
  ): TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceActivated"
  ): TypedContractEvent<
    GovernanceActivatedEvent.InputTuple,
    GovernanceActivatedEvent.OutputTuple,
    GovernanceActivatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceHookSet"
  ): TypedContractEvent<
    GovernanceHookSetEvent.InputTuple,
    GovernanceHookSetEvent.OutputTuple,
    GovernanceHookSetEvent.OutputObject
  >;
  getEvent(
    key: "IndexTokenSet"
  ): TypedContractEvent<
    IndexTokenSetEvent.InputTuple,
    IndexTokenSetEvent.OutputTuple,
    IndexTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWeightUpdated"
  ): TypedContractEvent<
    TokenWeightUpdatedEvent.InputTuple,
    TokenWeightUpdatedEvent.OutputTuple,
    TokenWeightUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserDeposit"
  ): TypedContractEvent<
    UserDepositEvent.InputTuple,
    UserDepositEvent.OutputTuple,
    UserDepositEvent.OutputObject
  >;

  filters: {
    "ControllerSet(address)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "GovernanceActivated(bool)": TypedContractEvent<
      GovernanceActivatedEvent.InputTuple,
      GovernanceActivatedEvent.OutputTuple,
      GovernanceActivatedEvent.OutputObject
    >;
    GovernanceActivated: TypedContractEvent<
      GovernanceActivatedEvent.InputTuple,
      GovernanceActivatedEvent.OutputTuple,
      GovernanceActivatedEvent.OutputObject
    >;

    "GovernanceHookSet(address)": TypedContractEvent<
      GovernanceHookSetEvent.InputTuple,
      GovernanceHookSetEvent.OutputTuple,
      GovernanceHookSetEvent.OutputObject
    >;
    GovernanceHookSet: TypedContractEvent<
      GovernanceHookSetEvent.InputTuple,
      GovernanceHookSetEvent.OutputTuple,
      GovernanceHookSetEvent.OutputObject
    >;

    "IndexTokenSet(address)": TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;
    IndexTokenSet: TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;

    "TokenAdded(address,uint256)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenRemoved(address)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    "TokenWeightUpdated(address,uint256,uint256)": TypedContractEvent<
      TokenWeightUpdatedEvent.InputTuple,
      TokenWeightUpdatedEvent.OutputTuple,
      TokenWeightUpdatedEvent.OutputObject
    >;
    TokenWeightUpdated: TypedContractEvent<
      TokenWeightUpdatedEvent.InputTuple,
      TokenWeightUpdatedEvent.OutputTuple,
      TokenWeightUpdatedEvent.OutputObject
    >;

    "UserDeposit(address,address,uint256)": TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;
    UserDeposit: TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;
  };
}
