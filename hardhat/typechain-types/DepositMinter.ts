/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DepositMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLXY_DECIMALS"
      | "CLXY_RATIO"
      | "HBAR_RATIO"
      | "LYNX_DECIMALS"
      | "SAUCE_DECIMALS"
      | "SAUCE_RATIO"
      | "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT"
      | "admin"
      | "calculateRequiredDeposits"
      | "checkAllAssociations"
      | "clxyToken"
      | "emergencyWithdrawHbar"
      | "getHbarBalance"
      | "lynxToken"
      | "mintWithDeposits"
      | "sauceToken"
      | "setClxyToken"
      | "setLynxToken"
      | "setSauceToken"
      | "testHTSOperations"
      | "testHTSPrecompile"
      | "transferAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminTransferred"
      | "HTSCallResult"
      | "LynxMinted"
      | "TokenAddressSet"
      | "TokensDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLXY_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllAssociations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clxyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHbar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lynxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWithDeposits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sauceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClxyToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLynxToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSauceToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSOperations",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSPrecompile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLXY_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLXY_RATIO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HBAR_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllAssociations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clxyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHbar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lynxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sauceToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClxyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLynxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSauceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
}

export namespace AdminTransferredEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTSCallResultEvent {
  export type InputTuple = [
    functionName: string,
    success: boolean,
    data: BytesLike
  ];
  export type OutputTuple = [
    functionName: string,
    success: boolean,
    data: string
  ];
  export interface OutputObject {
    functionName: string;
    success: boolean;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [user: AddressLike, lynxAmount: BigNumberish];
  export type OutputTuple = [user: string, lynxAmount: bigint];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddressSetEvent {
  export type InputTuple = [
    tokenType: string,
    previousToken: AddressLike,
    newToken: AddressLike
  ];
  export type OutputTuple = [
    tokenType: string,
    previousToken: string,
    newToken: string
  ];
  export interface OutputObject {
    tokenType: string;
    previousToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish,
    hbarAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sauceAmount: bigint,
    clxyAmount: bigint,
    hbarAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    sauceAmount: bigint;
    clxyAmount: bigint;
    hbarAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DepositMinter extends BaseContract {
  connect(runner?: ContractRunner | null): DepositMinter;
  waitForDeployment(): Promise<this>;

  interface: DepositMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLXY_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  CLXY_RATIO: TypedContractMethod<[], [bigint], "view">;

  HBAR_RATIO: TypedContractMethod<[], [bigint], "view">;

  LYNX_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  SAUCE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  SAUCE_RATIO: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  calculateRequiredDeposits: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;

  checkAllAssociations: TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;

  clxyToken: TypedContractMethod<[], [string], "view">;

  emergencyWithdrawHbar: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHbarBalance: TypedContractMethod<[], [bigint], "view">;

  lynxToken: TypedContractMethod<[], [string], "view">;

  mintWithDeposits: TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  sauceToken: TypedContractMethod<[], [string], "view">;

  setClxyToken: TypedContractMethod<
    [_clxyToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setLynxToken: TypedContractMethod<
    [_lynxToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setSauceToken: TypedContractMethod<
    [_sauceToken: AddressLike],
    [void],
    "nonpayable"
  >;

  testHTSOperations: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;

  testHTSPrecompile: TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLXY_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAllAssociations"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clxyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdrawHbar"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHbarBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lynxToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintWithDeposits"
  ): TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sauceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setClxyToken"
  ): TypedContractMethod<[_clxyToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLynxToken"
  ): TypedContractMethod<[_lynxToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSauceToken"
  ): TypedContractMethod<[_sauceToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testHTSOperations"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHTSPrecompile"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminTransferred"
  ): TypedContractEvent<
    AdminTransferredEvent.InputTuple,
    AdminTransferredEvent.OutputTuple,
    AdminTransferredEvent.OutputObject
  >;
  getEvent(
    key: "HTSCallResult"
  ): TypedContractEvent<
    HTSCallResultEvent.InputTuple,
    HTSCallResultEvent.OutputTuple,
    HTSCallResultEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAddressSet"
  ): TypedContractEvent<
    TokenAddressSetEvent.InputTuple,
    TokenAddressSetEvent.OutputTuple,
    TokenAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;

  filters: {
    "AdminTransferred(address,address)": TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;
    AdminTransferred: TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;

    "HTSCallResult(string,bool,bytes)": TypedContractEvent<
      HTSCallResultEvent.InputTuple,
      HTSCallResultEvent.OutputTuple,
      HTSCallResultEvent.OutputObject
    >;
    HTSCallResult: TypedContractEvent<
      HTSCallResultEvent.InputTuple,
      HTSCallResultEvent.OutputTuple,
      HTSCallResultEvent.OutputObject
    >;

    "LynxMinted(address,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;

    "TokenAddressSet(string,address,address)": TypedContractEvent<
      TokenAddressSetEvent.InputTuple,
      TokenAddressSetEvent.OutputTuple,
      TokenAddressSetEvent.OutputObject
    >;
    TokenAddressSet: TypedContractEvent<
      TokenAddressSetEvent.InputTuple,
      TokenAddressSetEvent.OutputTuple,
      TokenAddressSetEvent.OutputObject
    >;

    "TokensDeposited(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
  };
}
