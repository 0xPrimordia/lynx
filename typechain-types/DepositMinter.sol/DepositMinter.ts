/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DepositMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "ADMIN()"
      | "CLXY_DECIMALS"
      | "CLXY_DECIMALS()"
      | "CLXY_RATIO"
      | "CLXY_RATIO()"
      | "CLXY_TOKEN"
      | "CLXY_TOKEN()"
      | "HBAR_RATIO"
      | "HBAR_RATIO()"
      | "LYNX_DECIMALS"
      | "LYNX_DECIMALS()"
      | "LYNX_TOKEN"
      | "LYNX_TOKEN()"
      | "SAUCE_DECIMALS"
      | "SAUCE_DECIMALS()"
      | "SAUCE_RATIO"
      | "SAUCE_RATIO()"
      | "SAUCE_TOKEN"
      | "SAUCE_TOKEN()"
      | "TREASURY"
      | "TREASURY()"
      | "associateTokens"
      | "associateTokens()"
      | "calculateRequiredDeposits"
      | "calculateRequiredDeposits(uint256)"
      | "checkAssociations"
      | "checkAssociations()"
      | "emergencyWithdrawHbar"
      | "emergencyWithdrawHbar(uint256)"
      | "getHbarBalance"
      | "getHbarBalance()"
      | "mintWithDeposits"
      | "mintWithDeposits(uint256,uint256,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositsProcessed"
      | "DepositsProcessed(address,uint256,uint256)"
      | "LynxMinted"
      | "LynxMinted(address,uint256)"
      | "MintAttempt"
      | "MintAttempt(address,uint256,uint256)"
      | "MintResult"
      | "MintResult(int64,int64)"
      | "TokensAssociated"
      | "TokensAssociated(address,int64)"
      | "TokensDeposited"
      | "TokensDeposited(address,uint256,uint256,uint256)"
      | "TransferAttempt"
      | "TransferAttempt(address,address,uint256)"
      | "TransferResult"
      | "TransferResult(int64)"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "ADMIN()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CLXY_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TREASURY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TREASURY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAssociations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAssociations()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHbar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHbar(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithDeposits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithDeposits(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ADMIN()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLXY_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLXY_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HBAR_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HBAR_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LYNX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TREASURY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TREASURY()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAssociations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAssociations()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHbar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHbar(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeposits(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
}

export namespace DepositsProcessedEvent {
  export type InputTuple = [
    user: AddressLike,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sauceAmount: bigint,
    clxyAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    sauceAmount: bigint;
    clxyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [user: AddressLike, lynxAmount: BigNumberish];
  export type OutputTuple = [user: string, lynxAmount: bigint];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintAttemptEvent {
  export type InputTuple = [
    user: AddressLike,
    lynxAmount: BigNumberish,
    lynxBaseUnits: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lynxAmount: bigint,
    lynxBaseUnits: bigint
  ];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
    lynxBaseUnits: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintResultEvent {
  export type InputTuple = [
    responseCode: BigNumberish,
    newTotalSupply: BigNumberish
  ];
  export type OutputTuple = [responseCode: bigint, newTotalSupply: bigint];
  export interface OutputObject {
    responseCode: bigint;
    newTotalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensAssociatedEvent {
  export type InputTuple = [token: AddressLike, responseCode: BigNumberish];
  export type OutputTuple = [token: string, responseCode: bigint];
  export interface OutputObject {
    token: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish,
    hbarAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sauceAmount: bigint,
    clxyAmount: bigint,
    hbarAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    sauceAmount: bigint;
    clxyAmount: bigint;
    hbarAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAttemptEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferResultEvent {
  export type InputTuple = [responseCode: BigNumberish];
  export type OutputTuple = [responseCode: bigint];
  export interface OutputObject {
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DepositMinter extends BaseContract {
  contractName: "DepositMinter";

  connect(runner?: ContractRunner | null): DepositMinter;
  waitForDeployment(): Promise<this>;

  interface: DepositMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  "ADMIN()": TypedContractMethod<[], [string], "view">;

  CLXY_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "CLXY_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  CLXY_RATIO: TypedContractMethod<[], [bigint], "view">;

  "CLXY_RATIO()": TypedContractMethod<[], [bigint], "view">;

  CLXY_TOKEN: TypedContractMethod<[], [string], "view">;

  "CLXY_TOKEN()": TypedContractMethod<[], [string], "view">;

  HBAR_RATIO: TypedContractMethod<[], [bigint], "view">;

  "HBAR_RATIO()": TypedContractMethod<[], [bigint], "view">;

  LYNX_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "LYNX_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  LYNX_TOKEN: TypedContractMethod<[], [string], "view">;

  "LYNX_TOKEN()": TypedContractMethod<[], [string], "view">;

  SAUCE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "SAUCE_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  SAUCE_RATIO: TypedContractMethod<[], [bigint], "view">;

  "SAUCE_RATIO()": TypedContractMethod<[], [bigint], "view">;

  SAUCE_TOKEN: TypedContractMethod<[], [string], "view">;

  "SAUCE_TOKEN()": TypedContractMethod<[], [string], "view">;

  TREASURY: TypedContractMethod<[], [string], "view">;

  "TREASURY()": TypedContractMethod<[], [string], "view">;

  associateTokens: TypedContractMethod<[], [void], "nonpayable">;

  "associateTokens()": TypedContractMethod<[], [void], "nonpayable">;

  calculateRequiredDeposits: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;

  "calculateRequiredDeposits(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;

  checkAssociations: TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        lynxAssociated: boolean;
        sauceAssociated: boolean;
        clxyAssociated: boolean;
      }
    ],
    "nonpayable"
  >;

  "checkAssociations()": TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        lynxAssociated: boolean;
        sauceAssociated: boolean;
        clxyAssociated: boolean;
      }
    ],
    "nonpayable"
  >;

  emergencyWithdrawHbar: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "emergencyWithdrawHbar(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHbarBalance: TypedContractMethod<[], [bigint], "view">;

  "getHbarBalance()": TypedContractMethod<[], [bigint], "view">;

  mintWithDeposits: TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  "mintWithDeposits(uint256,uint256,uint256)": TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ADMIN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLXY_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLXY_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LYNX_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAUCE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAUCE_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "associateTokens()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits(uint256)"
  ): TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAssociations"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        lynxAssociated: boolean;
        sauceAssociated: boolean;
        clxyAssociated: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkAssociations()"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        lynxAssociated: boolean;
        sauceAssociated: boolean;
        clxyAssociated: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawHbar"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawHbar(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHbarBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHbarBalance()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintWithDeposits"
  ): TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintWithDeposits(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "DepositsProcessed"
  ): TypedContractEvent<
    DepositsProcessedEvent.InputTuple,
    DepositsProcessedEvent.OutputTuple,
    DepositsProcessedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsProcessed(address,uint256,uint256)"
  ): TypedContractEvent<
    DepositsProcessed_address_uint256_uint256_Event.InputTuple,
    DepositsProcessed_address_uint256_uint256_Event.OutputTuple,
    DepositsProcessed_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted(address,uint256)"
  ): TypedContractEvent<
    LynxMinted_address_uint256_Event.InputTuple,
    LynxMinted_address_uint256_Event.OutputTuple,
    LynxMinted_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "MintAttempt"
  ): TypedContractEvent<
    MintAttemptEvent.InputTuple,
    MintAttemptEvent.OutputTuple,
    MintAttemptEvent.OutputObject
  >;
  getEvent(
    key: "MintAttempt(address,uint256,uint256)"
  ): TypedContractEvent<
    MintAttempt_address_uint256_uint256_Event.InputTuple,
    MintAttempt_address_uint256_uint256_Event.OutputTuple,
    MintAttempt_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "MintResult"
  ): TypedContractEvent<
    MintResultEvent.InputTuple,
    MintResultEvent.OutputTuple,
    MintResultEvent.OutputObject
  >;
  getEvent(
    key: "MintResult(int64,int64)"
  ): TypedContractEvent<
    MintResult_int64_int64_Event.InputTuple,
    MintResult_int64_int64_Event.OutputTuple,
    MintResult_int64_int64_Event.OutputObject
  >;
  getEvent(
    key: "TokensAssociated"
  ): TypedContractEvent<
    TokensAssociatedEvent.InputTuple,
    TokensAssociatedEvent.OutputTuple,
    TokensAssociatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensAssociated(address,int64)"
  ): TypedContractEvent<
    TokensAssociated_address_int64_Event.InputTuple,
    TokensAssociated_address_int64_Event.OutputTuple,
    TokensAssociated_address_int64_Event.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited(address,uint256,uint256,uint256)"
  ): TypedContractEvent<
    TokensDeposited_address_uint256_uint256_uint256_Event.InputTuple,
    TokensDeposited_address_uint256_uint256_uint256_Event.OutputTuple,
    TokensDeposited_address_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TransferAttempt"
  ): TypedContractEvent<
    TransferAttemptEvent.InputTuple,
    TransferAttemptEvent.OutputTuple,
    TransferAttemptEvent.OutputObject
  >;
  getEvent(
    key: "TransferAttempt(address,address,uint256)"
  ): TypedContractEvent<
    TransferAttempt_address_address_uint256_Event.InputTuple,
    TransferAttempt_address_address_uint256_Event.OutputTuple,
    TransferAttempt_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TransferResult"
  ): TypedContractEvent<
    TransferResultEvent.InputTuple,
    TransferResultEvent.OutputTuple,
    TransferResultEvent.OutputObject
  >;
  getEvent(
    key: "TransferResult(int64)"
  ): TypedContractEvent<
    TransferResult_int64_Event.InputTuple,
    TransferResult_int64_Event.OutputTuple,
    TransferResult_int64_Event.OutputObject
  >;

  filters: {
    "DepositsProcessed(address,uint256,uint256)": TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;
    DepositsProcessed: TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;

    "LynxMinted(address,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;

    "MintAttempt(address,uint256,uint256)": TypedContractEvent<
      MintAttemptEvent.InputTuple,
      MintAttemptEvent.OutputTuple,
      MintAttemptEvent.OutputObject
    >;
    MintAttempt: TypedContractEvent<
      MintAttemptEvent.InputTuple,
      MintAttemptEvent.OutputTuple,
      MintAttemptEvent.OutputObject
    >;

    "MintResult(int64,int64)": TypedContractEvent<
      MintResultEvent.InputTuple,
      MintResultEvent.OutputTuple,
      MintResultEvent.OutputObject
    >;
    MintResult: TypedContractEvent<
      MintResultEvent.InputTuple,
      MintResultEvent.OutputTuple,
      MintResultEvent.OutputObject
    >;

    "TokensAssociated(address,int64)": TypedContractEvent<
      TokensAssociatedEvent.InputTuple,
      TokensAssociatedEvent.OutputTuple,
      TokensAssociatedEvent.OutputObject
    >;
    TokensAssociated: TypedContractEvent<
      TokensAssociatedEvent.InputTuple,
      TokensAssociatedEvent.OutputTuple,
      TokensAssociatedEvent.OutputObject
    >;

    "TokensDeposited(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;

    "TransferAttempt(address,address,uint256)": TypedContractEvent<
      TransferAttemptEvent.InputTuple,
      TransferAttemptEvent.OutputTuple,
      TransferAttemptEvent.OutputObject
    >;
    TransferAttempt: TypedContractEvent<
      TransferAttemptEvent.InputTuple,
      TransferAttemptEvent.OutputTuple,
      TransferAttemptEvent.OutputObject
    >;

    "TransferResult(int64)": TypedContractEvent<
      TransferResultEvent.InputTuple,
      TransferResultEvent.OutputTuple,
      TransferResultEvent.OutputObject
    >;
    TransferResult: TypedContractEvent<
      TransferResultEvent.InputTuple,
      TransferResultEvent.OutputTuple,
      TransferResultEvent.OutputObject
    >;
  };
}
