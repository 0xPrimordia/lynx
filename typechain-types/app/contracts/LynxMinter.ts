/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LynxMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "ADMIN()"
      | "CLXY_RATIO"
      | "CLXY_RATIO()"
      | "CLXY_TOKEN"
      | "CLXY_TOKEN()"
      | "HBAR_RATIO"
      | "HBAR_RATIO()"
      | "HTS_PRECOMPILE"
      | "HTS_PRECOMPILE()"
      | "IS_SUPPLY_TYPE_INFINITE"
      | "IS_SUPPLY_TYPE_INFINITE()"
      | "LYNX_TOKEN"
      | "LYNX_TOKEN()"
      | "SAUCE_RATIO"
      | "SAUCE_RATIO()"
      | "SAUCE_TOKEN"
      | "SAUCE_TOKEN()"
      | "TOKEN_DECIMALS"
      | "TOKEN_DECIMALS()"
      | "TOKEN_MAX_SUPPLY"
      | "TOKEN_MAX_SUPPLY()"
      | "associateTokens"
      | "associateTokens()"
      | "burn"
      | "burn(uint256)"
      | "calculateRequiredCLXY"
      | "calculateRequiredCLXY(uint256)"
      | "calculateRequiredHBAR"
      | "calculateRequiredHBAR(uint256)"
      | "calculateRequiredSAUCE"
      | "calculateRequiredSAUCE(uint256)"
      | "checkAllowances"
      | "checkAllowances(address,uint256)"
      | "checkSupplyKey"
      | "checkSupplyKey()"
      | "createLynxToken"
      | "createLynxToken(string,string,string)"
      | "debugAllowances"
      | "debugAllowances(address)"
      | "getClxyRatio"
      | "getClxyRatio()"
      | "getHbarRatio"
      | "getHbarRatio()"
      | "getSauceRatio"
      | "getSauceRatio()"
      | "getTokenAddresses"
      | "getTokenAddresses()"
      | "hasSupplyKey"
      | "hasSupplyKey()"
      | "mint"
      | "mint(uint256)"
      | "setLynxTokenId"
      | "setLynxTokenId(address)"
      | "setSupplyKeyStatus"
      | "setSupplyKeyStatus(bool)"
      | "setTokenService"
      | "setTokenService(address)"
      | "testClxyAllowance"
      | "testClxyAllowance(uint256)"
      | "updateRatios"
      | "updateRatios(uint256,uint256,uint256)"
      | "updateSupplyKeyStatus"
      | "updateSupplyKeyStatus()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LynxBurned"
      | "LynxBurned(address,uint256,uint256,uint256,uint256)"
      | "LynxMinted"
      | "LynxMinted(address,uint256,uint256,uint256,uint256)"
      | "LynxTokenCreated"
      | "LynxTokenCreated(address,int64)"
      | "LynxTokenSet"
      | "LynxTokenSet(address)"
      | "RatiosUpdated"
      | "RatiosUpdated(uint256,uint256,uint256)"
      | "SupplyKeyVerified"
      | "SupplyKeyVerified(bool)"
      | "TokensAssociated"
      | "TokensAssociated(address,int64)"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "ADMIN()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HTS_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HTS_PRECOMPILE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MAX_SUPPLY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredCLXY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredCLXY(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredHBAR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredHBAR(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredSAUCE",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredSAUCE(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowances",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowances(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupplyKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupplyKey()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLynxToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLynxToken(string,string,string)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debugAllowances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debugAllowances(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClxyRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClxyRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSauceRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSauceRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSupplyKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSupplyKey()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mint(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLynxTokenId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLynxTokenId(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyStatus(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenService",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenService(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testClxyAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testClxyAllowance(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRatios",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRatios(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupplyKeyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupplyKeyStatus()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ADMIN()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CLXY_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLXY_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HBAR_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HBAR_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HTS_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HTS_PRECOMPILE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LYNX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MAX_SUPPLY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredCLXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredCLXY(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredHBAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredHBAR(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredSAUCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredSAUCE(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowances(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupplyKey()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLynxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLynxToken(string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugAllowances(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClxyRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClxyRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSauceRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSauceRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSupplyKey()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLynxTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLynxTokenId(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyStatus(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenService(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testClxyAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testClxyAllowance(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRatios(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupplyKeyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupplyKeyStatus()",
    data: BytesLike
  ): Result;
}

export namespace LynxBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    lynxAmount: BigNumberish,
    hbarAmount: BigNumberish,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lynxAmount: bigint,
    hbarAmount: bigint,
    sauceAmount: bigint,
    clxyAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
    hbarAmount: bigint;
    sauceAmount: bigint;
    clxyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    lynxAmount: BigNumberish,
    hbarAmount: BigNumberish,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lynxAmount: bigint,
    hbarAmount: bigint,
    sauceAmount: bigint,
    clxyAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
    hbarAmount: bigint;
    sauceAmount: bigint;
    clxyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxTokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [tokenAddress: string, responseCode: bigint];
  export interface OutputObject {
    tokenAddress: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxTokenSetEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatiosUpdatedEvent {
  export type InputTuple = [
    hbarRatio: BigNumberish,
    sauceRatio: BigNumberish,
    clxyRatio: BigNumberish
  ];
  export type OutputTuple = [
    hbarRatio: bigint,
    sauceRatio: bigint,
    clxyRatio: bigint
  ];
  export interface OutputObject {
    hbarRatio: bigint;
    sauceRatio: bigint;
    clxyRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyKeyVerifiedEvent {
  export type InputTuple = [hasKey: boolean];
  export type OutputTuple = [hasKey: boolean];
  export interface OutputObject {
    hasKey: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensAssociatedEvent {
  export type InputTuple = [token: AddressLike, responseCode: BigNumberish];
  export type OutputTuple = [token: string, responseCode: bigint];
  export interface OutputObject {
    token: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LynxMinter extends BaseContract {
  contractName: "LynxMinter";

  connect(runner?: ContractRunner | null): LynxMinter;
  waitForDeployment(): Promise<this>;

  interface: LynxMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  "ADMIN()": TypedContractMethod<[], [string], "view">;

  CLXY_RATIO: TypedContractMethod<[], [bigint], "view">;

  "CLXY_RATIO()": TypedContractMethod<[], [bigint], "view">;

  CLXY_TOKEN: TypedContractMethod<[], [string], "view">;

  "CLXY_TOKEN()": TypedContractMethod<[], [string], "view">;

  HBAR_RATIO: TypedContractMethod<[], [bigint], "view">;

  "HBAR_RATIO()": TypedContractMethod<[], [bigint], "view">;

  HTS_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  "HTS_PRECOMPILE()": TypedContractMethod<[], [string], "view">;

  IS_SUPPLY_TYPE_INFINITE: TypedContractMethod<[], [boolean], "view">;

  "IS_SUPPLY_TYPE_INFINITE()": TypedContractMethod<[], [boolean], "view">;

  LYNX_TOKEN: TypedContractMethod<[], [string], "view">;

  "LYNX_TOKEN()": TypedContractMethod<[], [string], "view">;

  SAUCE_RATIO: TypedContractMethod<[], [bigint], "view">;

  "SAUCE_RATIO()": TypedContractMethod<[], [bigint], "view">;

  SAUCE_TOKEN: TypedContractMethod<[], [string], "view">;

  "SAUCE_TOKEN()": TypedContractMethod<[], [string], "view">;

  TOKEN_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "TOKEN_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  TOKEN_MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  "TOKEN_MAX_SUPPLY()": TypedContractMethod<[], [bigint], "view">;

  associateTokens: TypedContractMethod<[], [void], "nonpayable">;

  "associateTokens()": TypedContractMethod<[], [void], "nonpayable">;

  burn: TypedContractMethod<[lynxAmount: BigNumberish], [void], "nonpayable">;

  "burn(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateRequiredCLXY: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  "calculateRequiredCLXY(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateRequiredHBAR: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  "calculateRequiredHBAR(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateRequiredSAUCE: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  "calculateRequiredSAUCE(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [bigint],
    "view"
  >;

  checkAllowances: TypedContractMethod<
    [user: AddressLike, lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        sauceRequired: bigint;
        clxyRequired: bigint;
        isSauceAllowanceSufficient: boolean;
        isClxyAllowanceSufficient: boolean;
      }
    ],
    "view"
  >;

  "checkAllowances(address,uint256)": TypedContractMethod<
    [user: AddressLike, lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        sauceRequired: bigint;
        clxyRequired: bigint;
        isSauceAllowanceSufficient: boolean;
        isClxyAllowanceSufficient: boolean;
      }
    ],
    "view"
  >;

  checkSupplyKey: TypedContractMethod<[], [void], "nonpayable">;

  "checkSupplyKey()": TypedContractMethod<[], [void], "nonpayable">;

  createLynxToken: TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "nonpayable"
  >;

  "createLynxToken(string,string,string)": TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "nonpayable"
  >;

  debugAllowances: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        lynxAllowance: bigint;
      }
    ],
    "view"
  >;

  "debugAllowances(address)": TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        lynxAllowance: bigint;
      }
    ],
    "view"
  >;

  getClxyRatio: TypedContractMethod<[], [bigint], "view">;

  "getClxyRatio()": TypedContractMethod<[], [bigint], "view">;

  getHbarRatio: TypedContractMethod<[], [bigint], "view">;

  "getHbarRatio()": TypedContractMethod<[], [bigint], "view">;

  getSauceRatio: TypedContractMethod<[], [bigint], "view">;

  "getSauceRatio()": TypedContractMethod<[], [bigint], "view">;

  getTokenAddresses: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lynxToken: string;
        sauceToken: string;
        clxyToken: string;
      }
    ],
    "view"
  >;

  "getTokenAddresses()": TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lynxToken: string;
        sauceToken: string;
        clxyToken: string;
      }
    ],
    "view"
  >;

  hasSupplyKey: TypedContractMethod<[], [boolean], "view">;

  "hasSupplyKey()": TypedContractMethod<[], [boolean], "view">;

  mint: TypedContractMethod<[lynxAmount: BigNumberish], [void], "payable">;

  "mint(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [void],
    "payable"
  >;

  setLynxTokenId: TypedContractMethod<
    [newLynxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  "setLynxTokenId(address)": TypedContractMethod<
    [newLynxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupplyKeyStatus: TypedContractMethod<
    [status: boolean],
    [void],
    "nonpayable"
  >;

  "setSupplyKeyStatus(bool)": TypedContractMethod<
    [status: boolean],
    [void],
    "nonpayable"
  >;

  setTokenService: TypedContractMethod<
    [mockHts: AddressLike],
    [void],
    "nonpayable"
  >;

  "setTokenService(address)": TypedContractMethod<
    [mockHts: AddressLike],
    [void],
    "nonpayable"
  >;

  testClxyAllowance: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [void],
    "payable"
  >;

  "testClxyAllowance(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [void],
    "payable"
  >;

  updateRatios: TypedContractMethod<
    [
      hbarRatio: BigNumberish,
      sauceRatio: BigNumberish,
      clxyRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "updateRatios(uint256,uint256,uint256)": TypedContractMethod<
    [
      hbarRatio: BigNumberish,
      sauceRatio: BigNumberish,
      clxyRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateSupplyKeyStatus: TypedContractMethod<[], [void], "nonpayable">;

  "updateSupplyKeyStatus()": TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ADMIN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLXY_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HTS_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HTS_PRECOMPILE()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IS_SUPPLY_TYPE_INFINITE"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "IS_SUPPLY_TYPE_INFINITE()"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "LYNX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LYNX_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAUCE_TOKEN()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MAX_SUPPLY()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "associateTokens()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burn(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateRequiredCLXY"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredCLXY(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredHBAR"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredHBAR(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredSAUCE"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredSAUCE(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAllowances"
  ): TypedContractMethod<
    [user: AddressLike, lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        sauceRequired: bigint;
        clxyRequired: bigint;
        isSauceAllowanceSufficient: boolean;
        isClxyAllowanceSufficient: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAllowances(address,uint256)"
  ): TypedContractMethod<
    [user: AddressLike, lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        sauceRequired: bigint;
        clxyRequired: bigint;
        isSauceAllowanceSufficient: boolean;
        isClxyAllowanceSufficient: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSupplyKey"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkSupplyKey()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLynxToken"
  ): TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLynxToken(string,string,string)"
  ): TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debugAllowances"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        lynxAllowance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "debugAllowances(address)"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        sauceAllowance: bigint;
        clxyAllowance: bigint;
        lynxAllowance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClxyRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClxyRatio()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHbarRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHbarRatio()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSauceRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSauceRatio()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lynxToken: string;
        sauceToken: string;
        clxyToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenAddresses()"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lynxToken: string;
        sauceToken: string;
        clxyToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSupplyKey"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasSupplyKey()"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "mint(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "setLynxTokenId"
  ): TypedContractMethod<
    [newLynxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLynxTokenId(address)"
  ): TypedContractMethod<
    [newLynxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupplyKeyStatus"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupplyKeyStatus(bool)"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenService"
  ): TypedContractMethod<[mockHts: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenService(address)"
  ): TypedContractMethod<[mockHts: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testClxyAllowance"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "testClxyAllowance(uint256)"
  ): TypedContractMethod<[lynxAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "updateRatios"
  ): TypedContractMethod<
    [
      hbarRatio: BigNumberish,
      sauceRatio: BigNumberish,
      clxyRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRatios(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      hbarRatio: BigNumberish,
      sauceRatio: BigNumberish,
      clxyRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSupplyKeyStatus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSupplyKeyStatus()"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "LynxBurned"
  ): TypedContractEvent<
    LynxBurnedEvent.InputTuple,
    LynxBurnedEvent.OutputTuple,
    LynxBurnedEvent.OutputObject
  >;
  getEvent(
    key: "LynxBurned(address,uint256,uint256,uint256,uint256)"
  ): TypedContractEvent<
    LynxBurned_address_uint256_uint256_uint256_uint256_Event.InputTuple,
    LynxBurned_address_uint256_uint256_uint256_uint256_Event.OutputTuple,
    LynxBurned_address_uint256_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted(address,uint256,uint256,uint256,uint256)"
  ): TypedContractEvent<
    LynxMinted_address_uint256_uint256_uint256_uint256_Event.InputTuple,
    LynxMinted_address_uint256_uint256_uint256_uint256_Event.OutputTuple,
    LynxMinted_address_uint256_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "LynxTokenCreated"
  ): TypedContractEvent<
    LynxTokenCreatedEvent.InputTuple,
    LynxTokenCreatedEvent.OutputTuple,
    LynxTokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LynxTokenCreated(address,int64)"
  ): TypedContractEvent<
    LynxTokenCreated_address_int64_Event.InputTuple,
    LynxTokenCreated_address_int64_Event.OutputTuple,
    LynxTokenCreated_address_int64_Event.OutputObject
  >;
  getEvent(
    key: "LynxTokenSet"
  ): TypedContractEvent<
    LynxTokenSetEvent.InputTuple,
    LynxTokenSetEvent.OutputTuple,
    LynxTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "LynxTokenSet(address)"
  ): TypedContractEvent<
    LynxTokenSet_address_Event.InputTuple,
    LynxTokenSet_address_Event.OutputTuple,
    LynxTokenSet_address_Event.OutputObject
  >;
  getEvent(
    key: "RatiosUpdated"
  ): TypedContractEvent<
    RatiosUpdatedEvent.InputTuple,
    RatiosUpdatedEvent.OutputTuple,
    RatiosUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RatiosUpdated(uint256,uint256,uint256)"
  ): TypedContractEvent<
    RatiosUpdated_uint256_uint256_uint256_Event.InputTuple,
    RatiosUpdated_uint256_uint256_uint256_Event.OutputTuple,
    RatiosUpdated_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "SupplyKeyVerified"
  ): TypedContractEvent<
    SupplyKeyVerifiedEvent.InputTuple,
    SupplyKeyVerifiedEvent.OutputTuple,
    SupplyKeyVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyKeyVerified(bool)"
  ): TypedContractEvent<
    SupplyKeyVerified_bool_Event.InputTuple,
    SupplyKeyVerified_bool_Event.OutputTuple,
    SupplyKeyVerified_bool_Event.OutputObject
  >;
  getEvent(
    key: "TokensAssociated"
  ): TypedContractEvent<
    TokensAssociatedEvent.InputTuple,
    TokensAssociatedEvent.OutputTuple,
    TokensAssociatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensAssociated(address,int64)"
  ): TypedContractEvent<
    TokensAssociated_address_int64_Event.InputTuple,
    TokensAssociated_address_int64_Event.OutputTuple,
    TokensAssociated_address_int64_Event.OutputObject
  >;

  filters: {
    "LynxBurned(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LynxBurnedEvent.InputTuple,
      LynxBurnedEvent.OutputTuple,
      LynxBurnedEvent.OutputObject
    >;
    LynxBurned: TypedContractEvent<
      LynxBurnedEvent.InputTuple,
      LynxBurnedEvent.OutputTuple,
      LynxBurnedEvent.OutputObject
    >;

    "LynxMinted(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;

    "LynxTokenCreated(address,int64)": TypedContractEvent<
      LynxTokenCreatedEvent.InputTuple,
      LynxTokenCreatedEvent.OutputTuple,
      LynxTokenCreatedEvent.OutputObject
    >;
    LynxTokenCreated: TypedContractEvent<
      LynxTokenCreatedEvent.InputTuple,
      LynxTokenCreatedEvent.OutputTuple,
      LynxTokenCreatedEvent.OutputObject
    >;

    "LynxTokenSet(address)": TypedContractEvent<
      LynxTokenSetEvent.InputTuple,
      LynxTokenSetEvent.OutputTuple,
      LynxTokenSetEvent.OutputObject
    >;
    LynxTokenSet: TypedContractEvent<
      LynxTokenSetEvent.InputTuple,
      LynxTokenSetEvent.OutputTuple,
      LynxTokenSetEvent.OutputObject
    >;

    "RatiosUpdated(uint256,uint256,uint256)": TypedContractEvent<
      RatiosUpdatedEvent.InputTuple,
      RatiosUpdatedEvent.OutputTuple,
      RatiosUpdatedEvent.OutputObject
    >;
    RatiosUpdated: TypedContractEvent<
      RatiosUpdatedEvent.InputTuple,
      RatiosUpdatedEvent.OutputTuple,
      RatiosUpdatedEvent.OutputObject
    >;

    "SupplyKeyVerified(bool)": TypedContractEvent<
      SupplyKeyVerifiedEvent.InputTuple,
      SupplyKeyVerifiedEvent.OutputTuple,
      SupplyKeyVerifiedEvent.OutputObject
    >;
    SupplyKeyVerified: TypedContractEvent<
      SupplyKeyVerifiedEvent.InputTuple,
      SupplyKeyVerifiedEvent.OutputTuple,
      SupplyKeyVerifiedEvent.OutputObject
    >;

    "TokensAssociated(address,int64)": TypedContractEvent<
      TokensAssociatedEvent.InputTuple,
      TokensAssociatedEvent.OutputTuple,
      TokensAssociatedEvent.OutputObject
    >;
    TokensAssociated: TypedContractEvent<
      TokensAssociatedEvent.InputTuple,
      TokensAssociatedEvent.OutputTuple,
      TokensAssociatedEvent.OutputObject
    >;
  };
}
