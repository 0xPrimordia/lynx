// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../index-token/interfaces/IHederaTokenService.sol";

contract TestHTSMinimal {
    address private constant HTS_PRECOMPILE = address(0x0000000000000000000000000000000000000167);
    IHederaTokenService private hts;

    event TokenCreated(address tokenAddress, int responseCode);
    event Checkpoint(string label, uint256 gasRemaining);

    constructor() {
        hts = IHederaTokenService(HTS_PRECOMPILE);
    }

    // Allow the contract to receive HBAR
    receive() external payable {}

    // Checkpoint for gas tracking
    function checkpoint(string memory label) internal {
        emit Checkpoint(label, gasleft());
    }

    // Test with absolutely minimal key structure
    function createMinimalToken() external {
        checkpoint("Start createMinimalToken");
        
        // Create a single admin key with this contract as the key
        bytes memory adminKey = abi.encode(address(this));
        IHederaTokenService.TokenKey[] memory keys = new IHederaTokenService.TokenKey[](1);
        keys[0] = IHederaTokenService.TokenKey(
            IHederaTokenService.KeyType.ADMIN,
            IHederaTokenService.KeyValueType.CONTRACT_ID,
            adminKey
        );
        
        checkpoint("Before token struct creation");
        
        // Create the token struct with minimal fields
        IHederaTokenService.HederaToken memory token;
        token.name = "Minimal";
        token.symbol = "MIN";
        token.memo = "Minimal test";
        token.treasury = address(this);
        token.tokenKeys = keys;
        
        checkpoint("Before HTS call");
        
        // Call HTS to create the token
        int responseCode;
        address createdToken;
        (responseCode, createdToken) = hts.createToken(token, 0);
        
        checkpoint("After HTS call");
        
        // Emit the result
        emit TokenCreated(createdToken, responseCode);
    }
    
    // Test with no keys at all
    function createNoKeysToken() external {
        checkpoint("Start createNoKeysToken");
        
        // Create token struct with no keys
        IHederaTokenService.HederaToken memory token;
        token.name = "NoKeys";
        token.symbol = "NOK";
        token.memo = "No keys test";
        token.treasury = address(this);
        // Explicitly empty keys array
        token.tokenKeys = new IHederaTokenService.TokenKey[](0);
        
        checkpoint("Before HTS call (no keys)");
        
        // Create the token
        int responseCode;
        address createdToken;
        (responseCode, createdToken) = hts.createToken(token, 0);
        
        checkpoint("After HTS call (no keys)");
        
        // Emit the result
        emit TokenCreated(createdToken, responseCode);
    }
} 