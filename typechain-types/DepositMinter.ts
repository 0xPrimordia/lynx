/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DepositMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLXY_DECIMALS"
      | "CLXY_DECIMALS()"
      | "CLXY_RATIO"
      | "CLXY_RATIO()"
      | "HBAR_RATIO"
      | "HBAR_RATIO()"
      | "LYNX_DECIMALS"
      | "LYNX_DECIMALS()"
      | "SAUCE_DECIMALS"
      | "SAUCE_DECIMALS()"
      | "SAUCE_RATIO"
      | "SAUCE_RATIO()"
      | "admin"
      | "admin()"
      | "associateTokens"
      | "associateTokens(address[])"
      | "calculateRequiredDeposits"
      | "calculateRequiredDeposits(uint256)"
      | "checkAllAssociations"
      | "checkAllAssociations()"
      | "clxyToken"
      | "clxyToken()"
      | "emergencyWithdrawHbar"
      | "emergencyWithdrawHbar(uint256)"
      | "getHbarBalance"
      | "getHbarBalance()"
      | "lynxToken"
      | "lynxToken()"
      | "mintWithDeposits"
      | "mintWithDeposits(uint256,uint256,uint256)"
      | "redirectForToken"
      | "redirectForToken(address,bytes)"
      | "sauceToken"
      | "sauceToken()"
      | "setClxyToken"
      | "setClxyToken(address)"
      | "setLynxToken"
      | "setLynxToken(address)"
      | "setSauceToken"
      | "setSauceToken(address)"
      | "testHTSOperations"
      | "testHTSOperations(address,address)"
      | "testHTSPrecompile"
      | "testHTSPrecompile()"
      | "transferAdmin"
      | "transferAdmin(address)"
      | "transferFrom"
      | "transferFrom(address,address,address,uint256)"
      | "transferFromNFT"
      | "transferFromNFT(address,address,address,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminTransferred"
      | "AdminTransferred(address,address)"
      | "AllowanceCheck"
      | "AllowanceCheck(address,address,address,uint256)"
      | "AssociationResult"
      | "AssociationResult(address,int256)"
      | "BalanceCheck"
      | "BalanceCheck(address,address,uint256)"
      | "CallResponseEvent"
      | "CallResponseEvent(bool,bytes)"
      | "HTSOperationResult"
      | "HTSOperationResult(string,address,address,int256,string)"
      | "LynxMinted"
      | "LynxMinted(address,uint256)"
      | "TokenAddressSet"
      | "TokenAddressSet(string,address,address)"
      | "TokensDeposited"
      | "TokensDeposited(address,uint256,uint256,uint256)"
      | "ValidationStep"
      | "ValidationStep(string,bool,string)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLXY_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLXY_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HBAR_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_DECIMALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_RATIO()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "associateTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllAssociations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllAssociations()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clxyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clxyToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHbar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHbar(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHbarBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lynxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lynxToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithDeposits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithDeposits(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redirectForToken",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redirectForToken(address,bytes)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sauceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sauceToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClxyToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClxyToken(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLynxToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLynxToken(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSauceToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSauceToken(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSOperations",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSOperations(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSPrecompile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testHTSPrecompile()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromNFT",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromNFT(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLXY_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLXY_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLXY_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HBAR_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HBAR_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LYNX_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_DECIMALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_RATIO()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllAssociations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllAssociations()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clxyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clxyToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHbar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHbar(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHbarBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lynxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lynxToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeposits(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redirectForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redirectForToken(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sauceToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sauceToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClxyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClxyToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLynxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLynxToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSauceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSauceToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSOperations(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHTSPrecompile()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromNFT(address,address,address,uint256)",
    data: BytesLike
  ): Result;
}

export namespace AdminTransferredEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowanceCheckEvent {
  export type InputTuple = [
    token: AddressLike,
    owner: AddressLike,
    spender: AddressLike,
    allowance: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    owner: string,
    spender: string,
    allowance: bigint
  ];
  export interface OutputObject {
    token: string;
    owner: string;
    spender: string;
    allowance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssociationResultEvent {
  export type InputTuple = [token: AddressLike, responseCode: BigNumberish];
  export type OutputTuple = [token: string, responseCode: bigint];
  export interface OutputObject {
    token: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceCheckEvent {
  export type InputTuple = [
    token: AddressLike,
    account: AddressLike,
    balance: BigNumberish
  ];
  export type OutputTuple = [token: string, account: string, balance: bigint];
  export interface OutputObject {
    token: string;
    account: string;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallResponseEventEvent {
  export type InputTuple = [arg0: boolean, arg1: BytesLike];
  export type OutputTuple = [arg0: boolean, arg1: string];
  export interface OutputObject {
    arg0: boolean;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTSOperationResultEvent {
  export type InputTuple = [
    operation: string,
    token: AddressLike,
    account: AddressLike,
    responseCode: BigNumberish,
    message: string
  ];
  export type OutputTuple = [
    operation: string,
    token: string,
    account: string,
    responseCode: bigint,
    message: string
  ];
  export interface OutputObject {
    operation: string;
    token: string;
    account: string;
    responseCode: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [user: AddressLike, lynxAmount: BigNumberish];
  export type OutputTuple = [user: string, lynxAmount: bigint];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddressSetEvent {
  export type InputTuple = [
    tokenType: string,
    previousToken: AddressLike,
    newToken: AddressLike
  ];
  export type OutputTuple = [
    tokenType: string,
    previousToken: string,
    newToken: string
  ];
  export interface OutputObject {
    tokenType: string;
    previousToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish,
    hbarAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sauceAmount: bigint,
    clxyAmount: bigint,
    hbarAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    sauceAmount: bigint;
    clxyAmount: bigint;
    hbarAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationStepEvent {
  export type InputTuple = [step: string, passed: boolean, details: string];
  export type OutputTuple = [step: string, passed: boolean, details: string];
  export interface OutputObject {
    step: string;
    passed: boolean;
    details: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DepositMinter extends BaseContract {
  contractName: "DepositMinter";

  connect(runner?: ContractRunner | null): DepositMinter;
  waitForDeployment(): Promise<this>;

  interface: DepositMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLXY_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "CLXY_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  CLXY_RATIO: TypedContractMethod<[], [bigint], "view">;

  "CLXY_RATIO()": TypedContractMethod<[], [bigint], "view">;

  HBAR_RATIO: TypedContractMethod<[], [bigint], "view">;

  "HBAR_RATIO()": TypedContractMethod<[], [bigint], "view">;

  LYNX_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "LYNX_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  SAUCE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "SAUCE_DECIMALS()": TypedContractMethod<[], [bigint], "view">;

  SAUCE_RATIO: TypedContractMethod<[], [bigint], "view">;

  "SAUCE_RATIO()": TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  "admin()": TypedContractMethod<[], [string], "view">;

  associateTokens: TypedContractMethod<
    [tokenAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "associateTokens(address[])": TypedContractMethod<
    [tokenAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  calculateRequiredDeposits: TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;

  "calculateRequiredDeposits(uint256)": TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;

  checkAllAssociations: TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;

  "checkAllAssociations()": TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;

  clxyToken: TypedContractMethod<[], [string], "view">;

  "clxyToken()": TypedContractMethod<[], [string], "view">;

  emergencyWithdrawHbar: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "emergencyWithdrawHbar(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHbarBalance: TypedContractMethod<[], [bigint], "view">;

  "getHbarBalance()": TypedContractMethod<[], [bigint], "view">;

  lynxToken: TypedContractMethod<[], [string], "view">;

  "lynxToken()": TypedContractMethod<[], [string], "view">;

  mintWithDeposits: TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  "mintWithDeposits(uint256,uint256,uint256)": TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  redirectForToken: TypedContractMethod<
    [token: AddressLike, encodedFunctionSelector: BytesLike],
    [[bigint, string] & { responseCode: bigint; response: string }],
    "nonpayable"
  >;

  "redirectForToken(address,bytes)": TypedContractMethod<
    [token: AddressLike, encodedFunctionSelector: BytesLike],
    [[bigint, string] & { responseCode: bigint; response: string }],
    "nonpayable"
  >;

  sauceToken: TypedContractMethod<[], [string], "view">;

  "sauceToken()": TypedContractMethod<[], [string], "view">;

  setClxyToken: TypedContractMethod<
    [_clxyToken: AddressLike],
    [void],
    "nonpayable"
  >;

  "setClxyToken(address)": TypedContractMethod<
    [_clxyToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setLynxToken: TypedContractMethod<
    [_lynxToken: AddressLike],
    [void],
    "nonpayable"
  >;

  "setLynxToken(address)": TypedContractMethod<
    [_lynxToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setSauceToken: TypedContractMethod<
    [_sauceToken: AddressLike],
    [void],
    "nonpayable"
  >;

  "setSauceToken(address)": TypedContractMethod<
    [_sauceToken: AddressLike],
    [void],
    "nonpayable"
  >;

  testHTSOperations: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;

  "testHTSOperations(address,address)": TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;

  testHTSPrecompile: TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;

  "testHTSPrecompile()": TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  "transferAdmin(address)": TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  "transferFrom(address,address,address,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  transferFromNFT: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      serialNumber: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  "transferFromNFT(address,address,address,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      serialNumber: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLXY_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLXY_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HBAR_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LYNX_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_DECIMALS()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAUCE_RATIO()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[tokenAddresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "associateTokens(address[])"
  ): TypedContractMethod<[tokenAddresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits(uint256)"
  ): TypedContractMethod<
    [lynxAmount: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        sauceRequired: bigint;
        clxyRequired: bigint;
        hbarRequired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAllAssociations"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkAllAssociations()"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        contractSauceAssociated: boolean;
        contractClxyAssociated: boolean;
        contractLynxAssociated: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clxyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clxyToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdrawHbar"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawHbar(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHbarBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHbarBalance()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lynxToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lynxToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintWithDeposits"
  ): TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintWithDeposits(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      lynxAmount: BigNumberish,
      sauceAmount: BigNumberish,
      clxyAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "redirectForToken"
  ): TypedContractMethod<
    [token: AddressLike, encodedFunctionSelector: BytesLike],
    [[bigint, string] & { responseCode: bigint; response: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redirectForToken(address,bytes)"
  ): TypedContractMethod<
    [token: AddressLike, encodedFunctionSelector: BytesLike],
    [[bigint, string] & { responseCode: bigint; response: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sauceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sauceToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setClxyToken"
  ): TypedContractMethod<[_clxyToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClxyToken(address)"
  ): TypedContractMethod<[_clxyToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLynxToken"
  ): TypedContractMethod<[_lynxToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLynxToken(address)"
  ): TypedContractMethod<[_lynxToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSauceToken"
  ): TypedContractMethod<[_sauceToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSauceToken(address)"
  ): TypedContractMethod<[_sauceToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testHTSOperations"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHTSOperations(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isAssociated: boolean;
        balance: bigint;
        allowance: bigint;
        isValidToken: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHTSPrecompile"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "testHTSPrecompile()"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; precompileAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAdmin(address)"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromNFT"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      serialNumber: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromNFT(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      serialNumber: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AdminTransferred"
  ): TypedContractEvent<
    AdminTransferredEvent.InputTuple,
    AdminTransferredEvent.OutputTuple,
    AdminTransferredEvent.OutputObject
  >;
  getEvent(
    key: "AdminTransferred(address,address)"
  ): TypedContractEvent<
    AdminTransferred_address_address_Event.InputTuple,
    AdminTransferred_address_address_Event.OutputTuple,
    AdminTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "AllowanceCheck"
  ): TypedContractEvent<
    AllowanceCheckEvent.InputTuple,
    AllowanceCheckEvent.OutputTuple,
    AllowanceCheckEvent.OutputObject
  >;
  getEvent(
    key: "AllowanceCheck(address,address,address,uint256)"
  ): TypedContractEvent<
    AllowanceCheck_address_address_address_uint256_Event.InputTuple,
    AllowanceCheck_address_address_address_uint256_Event.OutputTuple,
    AllowanceCheck_address_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "AssociationResult"
  ): TypedContractEvent<
    AssociationResultEvent.InputTuple,
    AssociationResultEvent.OutputTuple,
    AssociationResultEvent.OutputObject
  >;
  getEvent(
    key: "AssociationResult(address,int256)"
  ): TypedContractEvent<
    AssociationResult_address_int256_Event.InputTuple,
    AssociationResult_address_int256_Event.OutputTuple,
    AssociationResult_address_int256_Event.OutputObject
  >;
  getEvent(
    key: "BalanceCheck"
  ): TypedContractEvent<
    BalanceCheckEvent.InputTuple,
    BalanceCheckEvent.OutputTuple,
    BalanceCheckEvent.OutputObject
  >;
  getEvent(
    key: "BalanceCheck(address,address,uint256)"
  ): TypedContractEvent<
    BalanceCheck_address_address_uint256_Event.InputTuple,
    BalanceCheck_address_address_uint256_Event.OutputTuple,
    BalanceCheck_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "CallResponseEvent"
  ): TypedContractEvent<
    CallResponseEventEvent.InputTuple,
    CallResponseEventEvent.OutputTuple,
    CallResponseEventEvent.OutputObject
  >;
  getEvent(
    key: "CallResponseEvent(bool,bytes)"
  ): TypedContractEvent<
    CallResponseEvent_bool_bytes_Event.InputTuple,
    CallResponseEvent_bool_bytes_Event.OutputTuple,
    CallResponseEvent_bool_bytes_Event.OutputObject
  >;
  getEvent(
    key: "HTSOperationResult"
  ): TypedContractEvent<
    HTSOperationResultEvent.InputTuple,
    HTSOperationResultEvent.OutputTuple,
    HTSOperationResultEvent.OutputObject
  >;
  getEvent(
    key: "HTSOperationResult(string,address,address,int256,string)"
  ): TypedContractEvent<
    HTSOperationResult_string_address_address_int256_string_Event.InputTuple,
    HTSOperationResult_string_address_address_int256_string_Event.OutputTuple,
    HTSOperationResult_string_address_address_int256_string_Event.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted(address,uint256)"
  ): TypedContractEvent<
    LynxMinted_address_uint256_Event.InputTuple,
    LynxMinted_address_uint256_Event.OutputTuple,
    LynxMinted_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TokenAddressSet"
  ): TypedContractEvent<
    TokenAddressSetEvent.InputTuple,
    TokenAddressSetEvent.OutputTuple,
    TokenAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenAddressSet(string,address,address)"
  ): TypedContractEvent<
    TokenAddressSet_string_address_address_Event.InputTuple,
    TokenAddressSet_string_address_address_Event.OutputTuple,
    TokenAddressSet_string_address_address_Event.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited(address,uint256,uint256,uint256)"
  ): TypedContractEvent<
    TokensDeposited_address_uint256_uint256_uint256_Event.InputTuple,
    TokensDeposited_address_uint256_uint256_uint256_Event.OutputTuple,
    TokensDeposited_address_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ValidationStep"
  ): TypedContractEvent<
    ValidationStepEvent.InputTuple,
    ValidationStepEvent.OutputTuple,
    ValidationStepEvent.OutputObject
  >;
  getEvent(
    key: "ValidationStep(string,bool,string)"
  ): TypedContractEvent<
    ValidationStep_string_bool_string_Event.InputTuple,
    ValidationStep_string_bool_string_Event.OutputTuple,
    ValidationStep_string_bool_string_Event.OutputObject
  >;

  filters: {
    "AdminTransferred(address,address)": TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;
    AdminTransferred: TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;

    "AllowanceCheck(address,address,address,uint256)": TypedContractEvent<
      AllowanceCheckEvent.InputTuple,
      AllowanceCheckEvent.OutputTuple,
      AllowanceCheckEvent.OutputObject
    >;
    AllowanceCheck: TypedContractEvent<
      AllowanceCheckEvent.InputTuple,
      AllowanceCheckEvent.OutputTuple,
      AllowanceCheckEvent.OutputObject
    >;

    "AssociationResult(address,int256)": TypedContractEvent<
      AssociationResultEvent.InputTuple,
      AssociationResultEvent.OutputTuple,
      AssociationResultEvent.OutputObject
    >;
    AssociationResult: TypedContractEvent<
      AssociationResultEvent.InputTuple,
      AssociationResultEvent.OutputTuple,
      AssociationResultEvent.OutputObject
    >;

    "BalanceCheck(address,address,uint256)": TypedContractEvent<
      BalanceCheckEvent.InputTuple,
      BalanceCheckEvent.OutputTuple,
      BalanceCheckEvent.OutputObject
    >;
    BalanceCheck: TypedContractEvent<
      BalanceCheckEvent.InputTuple,
      BalanceCheckEvent.OutputTuple,
      BalanceCheckEvent.OutputObject
    >;

    "CallResponseEvent(bool,bytes)": TypedContractEvent<
      CallResponseEventEvent.InputTuple,
      CallResponseEventEvent.OutputTuple,
      CallResponseEventEvent.OutputObject
    >;
    CallResponseEvent: TypedContractEvent<
      CallResponseEventEvent.InputTuple,
      CallResponseEventEvent.OutputTuple,
      CallResponseEventEvent.OutputObject
    >;

    "HTSOperationResult(string,address,address,int256,string)": TypedContractEvent<
      HTSOperationResultEvent.InputTuple,
      HTSOperationResultEvent.OutputTuple,
      HTSOperationResultEvent.OutputObject
    >;
    HTSOperationResult: TypedContractEvent<
      HTSOperationResultEvent.InputTuple,
      HTSOperationResultEvent.OutputTuple,
      HTSOperationResultEvent.OutputObject
    >;

    "LynxMinted(address,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;

    "TokenAddressSet(string,address,address)": TypedContractEvent<
      TokenAddressSetEvent.InputTuple,
      TokenAddressSetEvent.OutputTuple,
      TokenAddressSetEvent.OutputObject
    >;
    TokenAddressSet: TypedContractEvent<
      TokenAddressSetEvent.InputTuple,
      TokenAddressSetEvent.OutputTuple,
      TokenAddressSetEvent.OutputObject
    >;

    "TokensDeposited(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;

    "ValidationStep(string,bool,string)": TypedContractEvent<
      ValidationStepEvent.InputTuple,
      ValidationStepEvent.OutputTuple,
      ValidationStepEvent.OutputObject
    >;
    ValidationStep: TypedContractEvent<
      ValidationStepEvent.InputTuple,
      ValidationStepEvent.OutputTuple,
      ValidationStepEvent.OutputObject
    >;
  };
}
