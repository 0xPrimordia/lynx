/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SimpleTokenMinter,
  SimpleTokenMinterInterface,
} from "../../debug/SimpleTokenMinter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int64",
        name: "amount",
        type: "int64",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "responseCode",
        type: "int256",
      },
    ],
    name: "MintSuccessful",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int64",
        name: "responseCode",
        type: "int64",
      },
    ],
    name: "TokenAssociated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newToken",
        type: "address",
      },
    ],
    name: "TokenSet",
    type: "event",
  },
  {
    inputs: [],
    name: "associateTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkAssociation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int64",
        name: "amount",
        type: "int64",
      },
    ],
    name: "mintTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "setTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191661016717905561076c806100346000396000f3fe6080604052600436106100595760003560e01c806310ca0bce1461006557806326a4e8d21461007c578063592886901461009c57806382b2e257146100c65780639d76ea58146100e9578063b62bca7a1461012157600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061007a610141565b005b34801561008857600080fd5b5061007a61009736600461059d565b61023a565b3480156100a857600080fd5b506100b161029b565b60405190151581526020015b60405180910390f35b3480156100d257600080fd5b506100db610341565b6040519081526020016100bd565b3480156100f557600080fd5b50600154610109906001600160a01b031681565b6040516001600160a01b0390911681526020016100bd565b34801561012d57600080fd5b5061007a61013c3660046105df565b6103e2565b6001546001600160a01b03166101725760405162461bcd60e51b8152600401610169906105fc565b60405180910390fd5b6000805460015460405163248a35ef60e11b81523060048201526001600160a01b0391821660248201529116906349146bde906044016020604051808303816000875af11580156101c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101eb919061062b565b600154604080516001600160a01b039092168252600783900b60208301529192507f67ffbb4c78b48980b096bba60e2f42b06e9f89d70c4c458668c902f696571ec8910160405180910390a150565b600180546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb910160405180910390a15050565b6001546000906001600160a01b03166102c65760405162461bcd60e51b8152600401610169906105fc565b600054600154604051631c97fa2960e21b81523060048201526001600160a01b03918216602482015291169063725fe8a490604401602060405180830381865afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190610648565b905090565b6001546000906001600160a01b031661036c5760405162461bcd60e51b8152600401610169906105fc565b600054600154604051633de222bb60e21b81526001600160a01b03918216600482015230602482015291169063f7888aec90604401602060405180830381865afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c919061066a565b6001546001600160a01b031661040a5760405162461bcd60e51b8152600401610169906105fc565b60008160070b1361045d5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610169565b6000805460015460408051848152602081019091526001600160a01b039283169263ec12dc029216908590856104a3565b606081526020019060019003908161048e5790505b506040518463ffffffff1660e01b81526004016104c293929190610683565b6020604051808303816000875af11580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610505919061062b565b600154604080516001600160a01b039092168252600785810b60208401529290920b9181018290529091507ffc9c5e2ed9c7911538c33c84a00eb47cdf7337b12069bc933a544a440b196b619060600160405180910390a180156105995760405162461bcd60e51b815260206004820152600b60248201526a135a5b9d0819985a5b195960aa1b6044820152606401610169565b5050565b6000602082840312156105af57600080fd5b81356001600160a01b03811681146105c657600080fd5b9392505050565b8060070b81146105dc57600080fd5b50565b6000602082840312156105f157600080fd5b81356105c6816105cd565b602080825260159082015274151bdad95b881859191c995cdcc81b9bdd081cd95d605a1b604082015260600190565b60006020828403121561063d57600080fd5b81516105c6816105cd565b60006020828403121561065a57600080fd5b815180151581146105c657600080fd5b60006020828403121561067c57600080fd5b5051919050565b60006060820160018060a01b0386168352602067ffffffffffffffff8616818501526060604085015281855180845260808601915060808160051b87010193508287016000805b8381101561072657888703607f1901855282518051808952835b818110156106ff578281018901518a82018a015288016106e4565b508881018801849052601f01601f19169097018601965093850193918501916001016106ca565b50949a995050505050505050505056fea2646970667358221220769e36be047ad76a977c775d2e3b3ee11cad41858f58dd7c535f03fcaf5dd5a464736f6c63430008130033";

type SimpleTokenMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTokenMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleTokenMinter__factory extends ContractFactory {
  constructor(...args: SimpleTokenMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleTokenMinter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleTokenMinter__factory {
    return super.connect(runner) as SimpleTokenMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTokenMinterInterface {
    return new Interface(_abi) as SimpleTokenMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleTokenMinter {
    return new Contract(address, _abi, runner) as unknown as SimpleTokenMinter;
  }
}
