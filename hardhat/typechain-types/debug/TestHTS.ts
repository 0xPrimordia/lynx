/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestHTSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HTS_PRECOMPILE"
      | "createBasicToken"
      | "createTokenWithAdminKey"
      | "createTokenWithAutoRenew"
      | "createTokenWithSupplyKey"
      | "createTokenWithTreasury"
      | "lastCreatedToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Checkpoint"
      | "GasCheckpoint"
      | "TokenCreated"
      | "TokenCreationError"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HTS_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenWithAdminKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenWithAutoRenew",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenWithSupplyKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenWithTreasury",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCreatedToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "HTS_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenWithAdminKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenWithAutoRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenWithSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenWithTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCreatedToken",
    data: BytesLike
  ): Result;
}

export namespace CheckpointEvent {
  export type InputTuple = [step: string];
  export type OutputTuple = [step: string];
  export interface OutputObject {
    step: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasCheckpointEvent {
  export type InputTuple = [step: string, gasLeft: BigNumberish];
  export type OutputTuple = [step: string, gasLeft: bigint];
  export interface OutputObject {
    step: string;
    gasLeft: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [tokenAddress: string, responseCode: bigint];
  export interface OutputObject {
    tokenAddress: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreationErrorEvent {
  export type InputTuple = [responseCode: BigNumberish, errorMessage: string];
  export type OutputTuple = [responseCode: bigint, errorMessage: string];
  export interface OutputObject {
    responseCode: bigint;
    errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestHTS extends BaseContract {
  connect(runner?: ContractRunner | null): TestHTS;
  waitForDeployment(): Promise<this>;

  interface: TestHTSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HTS_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  createBasicToken: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "payable"
  >;

  createTokenWithAdminKey: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "payable"
  >;

  createTokenWithAutoRenew: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "payable"
  >;

  createTokenWithSupplyKey: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "payable"
  >;

  createTokenWithTreasury: TypedContractMethod<
    [name: string, symbol: string, treasury: AddressLike],
    [void],
    "payable"
  >;

  lastCreatedToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HTS_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createBasicToken"
  ): TypedContractMethod<[name: string, symbol: string], [void], "payable">;
  getFunction(
    nameOrSignature: "createTokenWithAdminKey"
  ): TypedContractMethod<[name: string, symbol: string], [void], "payable">;
  getFunction(
    nameOrSignature: "createTokenWithAutoRenew"
  ): TypedContractMethod<[name: string, symbol: string], [void], "payable">;
  getFunction(
    nameOrSignature: "createTokenWithSupplyKey"
  ): TypedContractMethod<[name: string, symbol: string], [void], "payable">;
  getFunction(
    nameOrSignature: "createTokenWithTreasury"
  ): TypedContractMethod<
    [name: string, symbol: string, treasury: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "lastCreatedToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Checkpoint"
  ): TypedContractEvent<
    CheckpointEvent.InputTuple,
    CheckpointEvent.OutputTuple,
    CheckpointEvent.OutputObject
  >;
  getEvent(
    key: "GasCheckpoint"
  ): TypedContractEvent<
    GasCheckpointEvent.InputTuple,
    GasCheckpointEvent.OutputTuple,
    GasCheckpointEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreationError"
  ): TypedContractEvent<
    TokenCreationErrorEvent.InputTuple,
    TokenCreationErrorEvent.OutputTuple,
    TokenCreationErrorEvent.OutputObject
  >;

  filters: {
    "Checkpoint(string)": TypedContractEvent<
      CheckpointEvent.InputTuple,
      CheckpointEvent.OutputTuple,
      CheckpointEvent.OutputObject
    >;
    Checkpoint: TypedContractEvent<
      CheckpointEvent.InputTuple,
      CheckpointEvent.OutputTuple,
      CheckpointEvent.OutputObject
    >;

    "GasCheckpoint(string,uint256)": TypedContractEvent<
      GasCheckpointEvent.InputTuple,
      GasCheckpointEvent.OutputTuple,
      GasCheckpointEvent.OutputObject
    >;
    GasCheckpoint: TypedContractEvent<
      GasCheckpointEvent.InputTuple,
      GasCheckpointEvent.OutputTuple,
      GasCheckpointEvent.OutputObject
    >;

    "TokenCreated(address,int64)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokenCreationError(int64,string)": TypedContractEvent<
      TokenCreationErrorEvent.InputTuple,
      TokenCreationErrorEvent.OutputTuple,
      TokenCreationErrorEvent.OutputObject
    >;
    TokenCreationError: TypedContractEvent<
      TokenCreationErrorEvent.InputTuple,
      TokenCreationErrorEvent.OutputTuple,
      TokenCreationErrorEvent.OutputObject
    >;
  };
}
