/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SimpleTokenMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "basicMint"
      | "basicMint(uint64)"
      | "setTokenAddress"
      | "setTokenAddress(address)"
      | "tokenAddress"
      | "tokenAddress()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MintAttempted"
      | "MintAttempted(address,uint64)"
      | "MintResult"
      | "MintResult(bool,bytes)"
      | "TokenSet"
      | "TokenSet(address)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "basicMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "basicMint(uint64)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "basicMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basicMint(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress()",
    data: BytesLike
  ): Result;
}

export namespace MintAttemptedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintResultEvent {
  export type InputTuple = [success: boolean, result: BytesLike];
  export type OutputTuple = [success: boolean, result: string];
  export interface OutputObject {
    success: boolean;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSetEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleTokenMinter extends BaseContract {
  contractName: "SimpleTokenMinter";

  connect(runner?: ContractRunner | null): SimpleTokenMinter;
  waitForDeployment(): Promise<this>;

  interface: SimpleTokenMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  basicMint: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  "basicMint(uint64)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  "setTokenAddress(address)": TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  "tokenAddress()": TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "basicMint"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "basicMint(uint64)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenAddress(address)"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddress()"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MintAttempted"
  ): TypedContractEvent<
    MintAttemptedEvent.InputTuple,
    MintAttemptedEvent.OutputTuple,
    MintAttemptedEvent.OutputObject
  >;
  getEvent(
    key: "MintAttempted(address,uint64)"
  ): TypedContractEvent<
    MintAttempted_address_uint64_Event.InputTuple,
    MintAttempted_address_uint64_Event.OutputTuple,
    MintAttempted_address_uint64_Event.OutputObject
  >;
  getEvent(
    key: "MintResult"
  ): TypedContractEvent<
    MintResultEvent.InputTuple,
    MintResultEvent.OutputTuple,
    MintResultEvent.OutputObject
  >;
  getEvent(
    key: "MintResult(bool,bytes)"
  ): TypedContractEvent<
    MintResult_bool_bytes_Event.InputTuple,
    MintResult_bool_bytes_Event.OutputTuple,
    MintResult_bool_bytes_Event.OutputObject
  >;
  getEvent(
    key: "TokenSet"
  ): TypedContractEvent<
    TokenSetEvent.InputTuple,
    TokenSetEvent.OutputTuple,
    TokenSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenSet(address)"
  ): TypedContractEvent<
    TokenSet_address_Event.InputTuple,
    TokenSet_address_Event.OutputTuple,
    TokenSet_address_Event.OutputObject
  >;

  filters: {
    "MintAttempted(address,uint64)": TypedContractEvent<
      MintAttemptedEvent.InputTuple,
      MintAttemptedEvent.OutputTuple,
      MintAttemptedEvent.OutputObject
    >;
    MintAttempted: TypedContractEvent<
      MintAttemptedEvent.InputTuple,
      MintAttemptedEvent.OutputTuple,
      MintAttemptedEvent.OutputObject
    >;

    "MintResult(bool,bytes)": TypedContractEvent<
      MintResultEvent.InputTuple,
      MintResultEvent.OutputTuple,
      MintResultEvent.OutputObject
    >;
    MintResult: TypedContractEvent<
      MintResultEvent.InputTuple,
      MintResultEvent.OutputTuple,
      MintResultEvent.OutputObject
    >;

    "TokenSet(address)": TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;
    TokenSet: TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;
  };
}
