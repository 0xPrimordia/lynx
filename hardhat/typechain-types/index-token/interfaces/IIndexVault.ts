/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIndexVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToken"
      | "calculateRequiredDeposits"
      | "depositToken"
      | "getComposition"
      | "processMint"
      | "removeToken"
      | "setController"
      | "setIndexToken"
      | "updateTokenWeight"
      | "validateMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComposition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenWeight",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMint",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMint",
    data: BytesLike
  ): Result;
}

export interface IIndexVault extends BaseContract {
  connect(runner?: ContractRunner | null): IIndexVault;
  waitForDeployment(): Promise<this>;

  interface: IIndexVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToken: TypedContractMethod<
    [_token: AddressLike, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateRequiredDeposits: TypedContractMethod<
    [_mintAmount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;

  depositToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getComposition: TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; weights: bigint[] }],
    "view"
  >;

  processMint: TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  setController: TypedContractMethod<
    [_controller: AddressLike],
    [void],
    "nonpayable"
  >;

  setIndexToken: TypedContractMethod<
    [_indexToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTokenWeight: TypedContractMethod<
    [_token: AddressLike, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateMint: TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [_token: AddressLike, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [_mintAmount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getComposition"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; weights: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "processMint"
  ): TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setController"
  ): TypedContractMethod<[_controller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIndexToken"
  ): TypedContractMethod<[_indexToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenWeight"
  ): TypedContractMethod<
    [_token: AddressLike, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateMint"
  ): TypedContractMethod<
    [_user: AddressLike, _mintAmount: BigNumberish],
    [boolean],
    "view"
  >;

  filters: {};
}
