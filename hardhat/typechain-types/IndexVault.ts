/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IndexVault {
  export type AssetStruct = { token: AddressLike; weight: BigNumberish };

  export type AssetStructOutput = [token: string, weight: bigint] & {
    token: string;
    weight: bigint;
  };
}

export interface IndexVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "calculateRequiredDeposits"
      | "composition"
      | "controller"
      | "depositAsset"
      | "deposits"
      | "getComposition"
      | "getDeposit"
      | "htsAddress"
      | "indexToken"
      | "receiveMint"
      | "setComposition"
      | "setIndexToken"
      | "updateAdmin"
      | "updateController"
      | "validateMint"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompositionUpdated"
      | "DepositReceived"
      | "IndexTokenSet"
      | "TokensDistributed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "composition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComposition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "htsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setComposition",
    values: [IndexVault.AssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMint",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "composition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "htsAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indexToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMint",
    data: BytesLike
  ): Result;
}

export namespace CompositionUpdatedEvent {
  export type InputTuple = [composition: IndexVault.AssetStruct[]];
  export type OutputTuple = [composition: IndexVault.AssetStructOutput[]];
  export interface OutputObject {
    composition: IndexVault.AssetStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositReceivedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexTokenSetEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDistributedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IndexVault extends BaseContract {
  connect(runner?: ContractRunner | null): IndexVault;
  waitForDeployment(): Promise<this>;

  interface: IndexVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  calculateRequiredDeposits: TypedContractMethod<
    [amount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;

  composition: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { token: string; weight: bigint }],
    "view"
  >;

  controller: TypedContractMethod<[], [string], "view">;

  depositAsset: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getComposition: TypedContractMethod<
    [],
    [IndexVault.AssetStructOutput[]],
    "view"
  >;

  getDeposit: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  htsAddress: TypedContractMethod<[], [string], "view">;

  indexToken: TypedContractMethod<[], [string], "view">;

  receiveMint: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setComposition: TypedContractMethod<
    [_composition: IndexVault.AssetStruct[]],
    [void],
    "nonpayable"
  >;

  setIndexToken: TypedContractMethod<
    [_indexToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateController: TypedContractMethod<
    [newController: AddressLike],
    [void],
    "nonpayable"
  >;

  validateMint: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [amount: BigNumberish],
    [[string[], bigint[]] & { tokens: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "composition"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { token: string; weight: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositAsset"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComposition"
  ): TypedContractMethod<[], [IndexVault.AssetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "htsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "indexToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveMint"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setComposition"
  ): TypedContractMethod<
    [_composition: IndexVault.AssetStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIndexToken"
  ): TypedContractMethod<[_indexToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateController"
  ): TypedContractMethod<[newController: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateMint"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CompositionUpdated"
  ): TypedContractEvent<
    CompositionUpdatedEvent.InputTuple,
    CompositionUpdatedEvent.OutputTuple,
    CompositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositReceived"
  ): TypedContractEvent<
    DepositReceivedEvent.InputTuple,
    DepositReceivedEvent.OutputTuple,
    DepositReceivedEvent.OutputObject
  >;
  getEvent(
    key: "IndexTokenSet"
  ): TypedContractEvent<
    IndexTokenSetEvent.InputTuple,
    IndexTokenSetEvent.OutputTuple,
    IndexTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "TokensDistributed"
  ): TypedContractEvent<
    TokensDistributedEvent.InputTuple,
    TokensDistributedEvent.OutputTuple,
    TokensDistributedEvent.OutputObject
  >;

  filters: {
    "CompositionUpdated(tuple[])": TypedContractEvent<
      CompositionUpdatedEvent.InputTuple,
      CompositionUpdatedEvent.OutputTuple,
      CompositionUpdatedEvent.OutputObject
    >;
    CompositionUpdated: TypedContractEvent<
      CompositionUpdatedEvent.InputTuple,
      CompositionUpdatedEvent.OutputTuple,
      CompositionUpdatedEvent.OutputObject
    >;

    "DepositReceived(address,address,uint256)": TypedContractEvent<
      DepositReceivedEvent.InputTuple,
      DepositReceivedEvent.OutputTuple,
      DepositReceivedEvent.OutputObject
    >;
    DepositReceived: TypedContractEvent<
      DepositReceivedEvent.InputTuple,
      DepositReceivedEvent.OutputTuple,
      DepositReceivedEvent.OutputObject
    >;

    "IndexTokenSet(address)": TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;
    IndexTokenSet: TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;

    "TokensDistributed(address,uint256)": TypedContractEvent<
      TokensDistributedEvent.InputTuple,
      TokensDistributedEvent.OutputTuple,
      TokensDistributedEvent.OutputObject
    >;
    TokensDistributed: TypedContractEvent<
      TokensDistributedEvent.InputTuple,
      TokensDistributedEvent.OutputTuple,
      TokensDistributedEvent.OutputObject
    >;
  };
}
