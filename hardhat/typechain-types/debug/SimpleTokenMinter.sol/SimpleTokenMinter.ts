/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SimpleTokenMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "associateTokens"
      | "checkAssociation"
      | "mintTokens"
      | "setTokenAddress"
      | "tokenAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MintSuccessful" | "TokenAssociated" | "TokenSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "associateTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAssociation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAssociation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
}

export namespace MintSuccessfulEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    responseCode: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAssociatedEvent {
  export type InputTuple = [token: AddressLike, responseCode: BigNumberish];
  export type OutputTuple = [token: string, responseCode: bigint];
  export interface OutputObject {
    token: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSetEvent {
  export type InputTuple = [previousToken: AddressLike, newToken: AddressLike];
  export type OutputTuple = [previousToken: string, newToken: string];
  export interface OutputObject {
    previousToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleTokenMinter extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleTokenMinter;
  waitForDeployment(): Promise<this>;

  interface: SimpleTokenMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  associateTokens: TypedContractMethod<[], [void], "nonpayable">;

  checkAssociation: TypedContractMethod<[], [boolean], "nonpayable">;

  mintTokens: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAssociation"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "mintTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MintSuccessful"
  ): TypedContractEvent<
    MintSuccessfulEvent.InputTuple,
    MintSuccessfulEvent.OutputTuple,
    MintSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "TokenAssociated"
  ): TypedContractEvent<
    TokenAssociatedEvent.InputTuple,
    TokenAssociatedEvent.OutputTuple,
    TokenAssociatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSet"
  ): TypedContractEvent<
    TokenSetEvent.InputTuple,
    TokenSetEvent.OutputTuple,
    TokenSetEvent.OutputObject
  >;

  filters: {
    "MintSuccessful(address,int64,int256)": TypedContractEvent<
      MintSuccessfulEvent.InputTuple,
      MintSuccessfulEvent.OutputTuple,
      MintSuccessfulEvent.OutputObject
    >;
    MintSuccessful: TypedContractEvent<
      MintSuccessfulEvent.InputTuple,
      MintSuccessfulEvent.OutputTuple,
      MintSuccessfulEvent.OutputObject
    >;

    "TokenAssociated(address,int64)": TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;
    TokenAssociated: TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;

    "TokenSet(address,address)": TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;
    TokenSet: TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;
  };
}
