/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SimpleTokenMinter,
  SimpleTokenMinterInterface,
} from "../SimpleTokenMinter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "amount",
        type: "uint64",
      },
    ],
    name: "MintAttempted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    name: "MintResult",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "amount",
        type: "uint64",
      },
    ],
    name: "basicMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "setTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104ab806100206000396000f3fe6080604052600436106100385760003560e01c80630f191ea51461004457806326a4e8d2146100665780639d76ea581461008657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004610309565b6100c2565b005b34801561007257600080fd5b5061006461008136600461033a565b6102b5565b34801561009257600080fd5b506000546100a6906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b03166101165760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881859191c995cdcc81b9bdd081cd95d605a1b604482015260640160405180910390fd5b600054604080516001600160a01b03909216825267ffffffffffffffff831660208301527fc80901357db72744e478a039bb323b1ed00a53fe585e9b3048f5b029e0f089c6910160405180910390a16040805160008082526020820190925281610190565b606081526020019060019003908161017b5790505b50600080546040519293507f278e0b882cd4958f2f9c4aafe4c6ce28d355695efa8dad09423dc5dd062c4e919283916101db916001600160a01b0390911690879087906024016103b3565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000806101676001600160a01b03168360405161022d9190610436565b6000604051808303816000865af19150503d806000811461026a576040519150601f19603f3d011682016040523d82523d6000602084013e61026f565b606091505b50915091507f34830ba415962f1d34c58a9458e74e3219ca36d1d91a639085f1cbb01ffa857582826040516102a5929190610452565b60405180910390a1505050505050565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fa07c91c183e42229e705a9795a1c06d76528b673788b849597364528c96eefb79060200160405180910390a150565b60006020828403121561031b57600080fd5b813567ffffffffffffffff8116811461033357600080fd5b9392505050565b60006020828403121561034c57600080fd5b81356001600160a01b038116811461033357600080fd5b60005b8381101561037e578181015183820152602001610366565b50506000910152565b6000815180845261039f816020860160208601610363565b601f01601f19169290920160200192915050565b60006060820160018060a01b0386168352602067ffffffffffffffff8616818501526060604085015281855180845260808601915060808160051b870101935082870160005b8281101561042757607f19888703018452610415868351610387565b955092840192908401906001016103f9565b50939998505050505050505050565b60008251610448818460208701610363565b9190910192915050565b821515815260406020820152600061046d6040830184610387565b94935050505056fea26469706673582212206cd73a161e3208d73c00e5a6f813235dcc61cb72d66419979aa37cfd6267982c64736f6c63430008120033";

type SimpleTokenMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTokenMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleTokenMinter__factory extends ContractFactory {
  constructor(...args: SimpleTokenMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleTokenMinter";
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleTokenMinter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleTokenMinter__factory {
    return super.connect(runner) as SimpleTokenMinter__factory;
  }
  static readonly contractName: "SimpleTokenMinter";

  public readonly contractName: "SimpleTokenMinter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTokenMinterInterface {
    return new Interface(_abi) as SimpleTokenMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleTokenMinter {
    return new Contract(address, _abi, runner) as unknown as SimpleTokenMinter;
  }
}
