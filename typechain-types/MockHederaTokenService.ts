/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IHederaTokenService {
  export type HederaTokenStruct = {
    name: string;
    symbol: string;
    treasury: AddressLike;
    memo: string;
    supplyType: boolean;
    maxSupply: BigNumberish;
    freezeDefault: boolean;
    freezeKey: AddressLike[];
    wipeKey: AddressLike[];
    supplyKey: AddressLike[];
    adminKey: AddressLike[];
    kycKey: AddressLike[];
    decimals: BigNumberish;
    autoRenewAccount: AddressLike;
    autoRenewPeriod: BigNumberish;
  };

  export type HederaTokenStructOutput = [
    name: string,
    symbol: string,
    treasury: string,
    memo: string,
    supplyType: boolean,
    maxSupply: bigint,
    freezeDefault: boolean,
    freezeKey: string[],
    wipeKey: string[],
    supplyKey: string[],
    adminKey: string[],
    kycKey: string[],
    decimals: bigint,
    autoRenewAccount: string,
    autoRenewPeriod: bigint
  ] & {
    name: string;
    symbol: string;
    treasury: string;
    memo: string;
    supplyType: boolean;
    maxSupply: bigint;
    freezeDefault: boolean;
    freezeKey: string[];
    wipeKey: string[];
    supplyKey: string[];
    adminKey: string[];
    kycKey: string[];
    decimals: bigint;
    autoRenewAccount: string;
    autoRenewPeriod: bigint;
  };
}

export interface MockHederaTokenServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "allowance(address,address,address)"
      | "associateToken"
      | "associateToken(address,address)"
      | "balanceOf"
      | "balanceOf(address,address)"
      | "burnToken"
      | "burnToken(address,uint256,bytes[])"
      | "clearTransferResults"
      | "clearTransferResults()"
      | "createToken"
      | "createToken((string,string,address,string,bool,uint32,bool,address[],address[],address[],address[],address[],uint8,address,uint32),uint256,uint8[],address[])"
      | "disassociateToken"
      | "disassociateToken(address,address)"
      | "getTokenInfo"
      | "getTokenInfo(address)"
      | "isSupplyKey"
      | "isSupplyKey(address,address)"
      | "isTokenAssociated"
      | "isTokenAssociated(address,address)"
      | "mintToken"
      | "mintToken(address,uint256,bytes[])"
      | "setAllowance"
      | "setAllowance(address,address,address,uint256)"
      | "setBalance"
      | "setBalance(address,address,uint256)"
      | "setMockedCreateTokenResponse"
      | "setMockedCreateTokenResponse(int64,address)"
      | "setSupplyKeyHolder"
      | "setSupplyKeyHolder(address,address)"
      | "setTokenAssociation"
      | "setTokenAssociation(address,address,bool)"
      | "setTransferResult"
      | "setTransferResult(address,int64)"
      | "setupTokens"
      | "setupTokens(address,address,address,address)"
      | "transferToken"
      | "transferToken(address,address,address,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TokenAssociated"
      | "TokenAssociated(address,address,int64)"
      | "TokenCreated"
      | "TokenCreated(address,int64)"
      | "TokenMinted"
      | "TokenMinted(address,uint256,int64)"
      | "TokenTransferred"
      | "TokenTransferred(address,address,address,uint256,int64)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address,address)",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "associateToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "associateToken(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken(address,uint256,bytes[])",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearTransferResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearTransferResults()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      IHederaTokenService.HederaTokenStruct,
      BigNumberish,
      BigNumberish[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken((string,string,address,string,bool,uint32,bool,address[],address[],address[],address[],address[],uint8,address,uint32),uint256,uint8[],address[])",
    values: [
      IHederaTokenService.HederaTokenStruct,
      BigNumberish,
      BigNumberish[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disassociateToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disassociateToken(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyKey",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyKey(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAssociated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAssociated(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken(address,uint256,bytes[])",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockedCreateTokenResponse",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockedCreateTokenResponse(int64,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyHolder",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyHolder(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAssociation",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAssociation(address,address,bool)",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferResult",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferResult(address,int64)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupTokens",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setupTokens(address,address,address,address)",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateToken(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnToken(address,uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearTransferResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearTransferResults()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken((string,string,address,string,bool,uint32,bool,address[],address[],address[],address[],address[],uint8,address,uint32),uint256,uint8[],address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disassociateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disassociateToken(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyKey(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAssociated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAssociated(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintToken(address,uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBalance(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockedCreateTokenResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockedCreateTokenResponse(int64,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyHolder(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAssociation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAssociation(address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferResult(address,int64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupTokens(address,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken(address,address,address,uint256)",
    data: BytesLike
  ): Result;
}

export namespace TokenAssociatedEvent {
  export type InputTuple = [
    token: AddressLike,
    account: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    account: string,
    responseCode: bigint
  ];
  export interface OutputObject {
    token: string;
    account: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [tokenAddress: string, responseCode: bigint];
  export interface OutputObject {
    tokenAddress: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    responseCode: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint,
    responseCode: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockHederaTokenService extends BaseContract {
  contractName: "MockHederaTokenService";

  connect(runner?: ContractRunner | null): MockHederaTokenService;
  waitForDeployment(): Promise<this>;

  interface: MockHederaTokenServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  "allowance(address,address,address)": TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  associateToken: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  "associateToken(address,address)": TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  "balanceOf(address,address)": TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  burnToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  "burnToken(address,uint256,bytes[])": TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  clearTransferResults: TypedContractMethod<[], [void], "nonpayable">;

  "clearTransferResults()": TypedContractMethod<[], [void], "nonpayable">;

  createToken: TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;

  "createToken((string,string,address,string,bool,uint32,bool,address[],address[],address[],address[],address[],uint8,address,uint32),uint256,uint8[],address[])": TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;

  disassociateToken: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  "disassociateToken(address,address)": TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getTokenInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [IHederaTokenService.HederaTokenStructOutput],
    "view"
  >;

  "getTokenInfo(address)": TypedContractMethod<
    [tokenAddress: AddressLike],
    [IHederaTokenService.HederaTokenStructOutput],
    "view"
  >;

  isSupplyKey: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  "isSupplyKey(address,address)": TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isTokenAssociated: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  "isTokenAssociated(address,address)": TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  "mintToken(address,uint256,bytes[])": TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  setAllowance: TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "setAllowance(address,address,address,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBalance: TypedContractMethod<
    [token: AddressLike, account: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setBalance(address,address,uint256)": TypedContractMethod<
    [token: AddressLike, account: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMockedCreateTokenResponse: TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  "setMockedCreateTokenResponse(int64,address)": TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupplyKeyHolder: TypedContractMethod<
    [token: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;

  "setSupplyKeyHolder(address,address)": TypedContractMethod<
    [token: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenAssociation: TypedContractMethod<
    [token: AddressLike, account: AddressLike, isAssociated: boolean],
    [void],
    "nonpayable"
  >;

  "setTokenAssociation(address,address,bool)": TypedContractMethod<
    [token: AddressLike, account: AddressLike, isAssociated: boolean],
    [void],
    "nonpayable"
  >;

  setTransferResult: TypedContractMethod<
    [token: AddressLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setTransferResult(address,int64)": TypedContractMethod<
    [token: AddressLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  setupTokens: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      sauceTokenAddress: AddressLike,
      clxyTokenAddress: AddressLike,
      userAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "setupTokens(address,address,address,address)": TypedContractMethod<
    [
      tokenAddress: AddressLike,
      sauceTokenAddress: AddressLike,
      clxyTokenAddress: AddressLike,
      userAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferToken: TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  "transferToken(address,address,address,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address,address)"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "associateToken"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "associateToken(address,address)"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnToken(address,uint256,bytes[])"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearTransferResults"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearTransferResults()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createToken((string,string,address,string,bool,uint32,bool,address[],address[],address[],address[],address[],uint8,address,uint32),uint256,uint8[],address[])"
  ): TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "disassociateToken"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disassociateToken(address,address)"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [IHederaTokenService.HederaTokenStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo(address)"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [IHederaTokenService.HederaTokenStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupplyKey"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupplyKey(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenAssociated"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenAssociated(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintToken(address,uint256,bytes[])"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowance"
  ): TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowance(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBalance"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBalance(address,address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMockedCreateTokenResponse"
  ): TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMockedCreateTokenResponse(int64,address)"
  ): TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupplyKeyHolder"
  ): TypedContractMethod<
    [token: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupplyKeyHolder(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAssociation"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, isAssociated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAssociation(address,address,bool)"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, isAssociated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferResult"
  ): TypedContractMethod<
    [token: AddressLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferResult(address,int64)"
  ): TypedContractMethod<
    [token: AddressLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupTokens"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      sauceTokenAddress: AddressLike,
      clxyTokenAddress: AddressLike,
      userAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupTokens(address,address,address,address)"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      sauceTokenAddress: AddressLike,
      clxyTokenAddress: AddressLike,
      userAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "TokenAssociated"
  ): TypedContractEvent<
    TokenAssociatedEvent.InputTuple,
    TokenAssociatedEvent.OutputTuple,
    TokenAssociatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAssociated(address,address,int64)"
  ): TypedContractEvent<
    TokenAssociated_address_address_int64_Event.InputTuple,
    TokenAssociated_address_address_int64_Event.OutputTuple,
    TokenAssociated_address_address_int64_Event.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated(address,int64)"
  ): TypedContractEvent<
    TokenCreated_address_int64_Event.InputTuple,
    TokenCreated_address_int64_Event.OutputTuple,
    TokenCreated_address_int64_Event.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted(address,uint256,int64)"
  ): TypedContractEvent<
    TokenMinted_address_uint256_int64_Event.InputTuple,
    TokenMinted_address_uint256_int64_Event.OutputTuple,
    TokenMinted_address_uint256_int64_Event.OutputObject
  >;
  getEvent(
    key: "TokenTransferred"
  ): TypedContractEvent<
    TokenTransferredEvent.InputTuple,
    TokenTransferredEvent.OutputTuple,
    TokenTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransferred(address,address,address,uint256,int64)"
  ): TypedContractEvent<
    TokenTransferred_address_address_address_uint256_int64_Event.InputTuple,
    TokenTransferred_address_address_address_uint256_int64_Event.OutputTuple,
    TokenTransferred_address_address_address_uint256_int64_Event.OutputObject
  >;

  filters: {
    "TokenAssociated(address,address,int64)": TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;
    TokenAssociated: TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;

    "TokenCreated(address,int64)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokenMinted(address,uint256,int64)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenTransferred(address,address,address,uint256,int64)": TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;
    TokenTransferred: TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;
  };
}
