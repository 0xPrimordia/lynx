/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IndexTokenControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "AUTO_RENEW_PERIOD"
      | "HTS_PRECOMPILE"
      | "INDEX_TOKEN"
      | "IS_SUPPLY_TYPE_INFINITE"
      | "TOKEN_DECIMALS"
      | "TOKEN_MAX_SUPPLY"
      | "calculateRequiredDeposits"
      | "checkSupplyKey"
      | "createIndexToken"
      | "getTokenAddress"
      | "hasSupplyKey"
      | "mintTo"
      | "setIndexTokenId"
      | "setSupplyKeyStatus"
      | "setTokenService"
      | "updateSupplyKeyStatus"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IndexTokenCreated"
      | "IndexTokenMinted"
      | "IndexTokenSet"
      | "SupplyKeyVerified"
      | "TokenCreationAttempt"
      | "TokenCreationError"
      | "TokenCreationStep"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AUTO_RENEW_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HTS_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupplyKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIndexToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSupplyKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexTokenId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenService",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupplyKeyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AUTO_RENEW_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HTS_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_SUPPLY_TYPE_INFINITE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIndexToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIndexTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupplyKeyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace IndexTokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [tokenAddress: string, responseCode: bigint];
  export interface OutputObject {
    tokenAddress: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexTokenMintedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexTokenSetEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyKeyVerifiedEvent {
  export type InputTuple = [hasKey: boolean];
  export type OutputTuple = [hasKey: boolean];
  export interface OutputObject {
    hasKey: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreationAttemptEvent {
  export type InputTuple = [
    name: string,
    symbol: string,
    memo: string,
    treasury: AddressLike
  ];
  export type OutputTuple = [
    name: string,
    symbol: string,
    memo: string,
    treasury: string
  ];
  export interface OutputObject {
    name: string;
    symbol: string;
    memo: string;
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreationErrorEvent {
  export type InputTuple = [responseCode: BigNumberish, errorMessage: string];
  export type OutputTuple = [responseCode: bigint, errorMessage: string];
  export interface OutputObject {
    responseCode: bigint;
    errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreationStepEvent {
  export type InputTuple = [
    step: string,
    tokenAddress: AddressLike,
    responseCode: BigNumberish
  ];
  export type OutputTuple = [
    step: string,
    tokenAddress: string,
    responseCode: bigint
  ];
  export interface OutputObject {
    step: string;
    tokenAddress: string;
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IndexTokenController extends BaseContract {
  connect(runner?: ContractRunner | null): IndexTokenController;
  waitForDeployment(): Promise<this>;

  interface: IndexTokenControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  AUTO_RENEW_PERIOD: TypedContractMethod<[], [bigint], "view">;

  HTS_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  INDEX_TOKEN: TypedContractMethod<[], [string], "view">;

  IS_SUPPLY_TYPE_INFINITE: TypedContractMethod<[], [boolean], "view">;

  TOKEN_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  TOKEN_MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  calculateRequiredDeposits: TypedContractMethod<
    [amount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  checkSupplyKey: TypedContractMethod<[], [void], "nonpayable">;

  createIndexToken: TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "payable"
  >;

  getTokenAddress: TypedContractMethod<[], [string], "view">;

  hasSupplyKey: TypedContractMethod<[], [boolean], "view">;

  mintTo: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIndexTokenId: TypedContractMethod<
    [newIndexTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupplyKeyStatus: TypedContractMethod<
    [status: boolean],
    [void],
    "nonpayable"
  >;

  setTokenService: TypedContractMethod<
    [mockHts: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSupplyKeyStatus: TypedContractMethod<[], [void], "nonpayable">;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AUTO_RENEW_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HTS_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INDEX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IS_SUPPLY_TYPE_INFINITE"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "TOKEN_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRequiredDeposits"
  ): TypedContractMethod<
    [amount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSupplyKey"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createIndexToken"
  ): TypedContractMethod<
    [name: string, symbol: string, memo: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasSupplyKey"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIndexTokenId"
  ): TypedContractMethod<
    [newIndexTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupplyKeyStatus"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenService"
  ): TypedContractMethod<[mockHts: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSupplyKeyStatus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "IndexTokenCreated"
  ): TypedContractEvent<
    IndexTokenCreatedEvent.InputTuple,
    IndexTokenCreatedEvent.OutputTuple,
    IndexTokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IndexTokenMinted"
  ): TypedContractEvent<
    IndexTokenMintedEvent.InputTuple,
    IndexTokenMintedEvent.OutputTuple,
    IndexTokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "IndexTokenSet"
  ): TypedContractEvent<
    IndexTokenSetEvent.InputTuple,
    IndexTokenSetEvent.OutputTuple,
    IndexTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "SupplyKeyVerified"
  ): TypedContractEvent<
    SupplyKeyVerifiedEvent.InputTuple,
    SupplyKeyVerifiedEvent.OutputTuple,
    SupplyKeyVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreationAttempt"
  ): TypedContractEvent<
    TokenCreationAttemptEvent.InputTuple,
    TokenCreationAttemptEvent.OutputTuple,
    TokenCreationAttemptEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreationError"
  ): TypedContractEvent<
    TokenCreationErrorEvent.InputTuple,
    TokenCreationErrorEvent.OutputTuple,
    TokenCreationErrorEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreationStep"
  ): TypedContractEvent<
    TokenCreationStepEvent.InputTuple,
    TokenCreationStepEvent.OutputTuple,
    TokenCreationStepEvent.OutputObject
  >;

  filters: {
    "IndexTokenCreated(address,int64)": TypedContractEvent<
      IndexTokenCreatedEvent.InputTuple,
      IndexTokenCreatedEvent.OutputTuple,
      IndexTokenCreatedEvent.OutputObject
    >;
    IndexTokenCreated: TypedContractEvent<
      IndexTokenCreatedEvent.InputTuple,
      IndexTokenCreatedEvent.OutputTuple,
      IndexTokenCreatedEvent.OutputObject
    >;

    "IndexTokenMinted(address,uint256)": TypedContractEvent<
      IndexTokenMintedEvent.InputTuple,
      IndexTokenMintedEvent.OutputTuple,
      IndexTokenMintedEvent.OutputObject
    >;
    IndexTokenMinted: TypedContractEvent<
      IndexTokenMintedEvent.InputTuple,
      IndexTokenMintedEvent.OutputTuple,
      IndexTokenMintedEvent.OutputObject
    >;

    "IndexTokenSet(address)": TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;
    IndexTokenSet: TypedContractEvent<
      IndexTokenSetEvent.InputTuple,
      IndexTokenSetEvent.OutputTuple,
      IndexTokenSetEvent.OutputObject
    >;

    "SupplyKeyVerified(bool)": TypedContractEvent<
      SupplyKeyVerifiedEvent.InputTuple,
      SupplyKeyVerifiedEvent.OutputTuple,
      SupplyKeyVerifiedEvent.OutputObject
    >;
    SupplyKeyVerified: TypedContractEvent<
      SupplyKeyVerifiedEvent.InputTuple,
      SupplyKeyVerifiedEvent.OutputTuple,
      SupplyKeyVerifiedEvent.OutputObject
    >;

    "TokenCreationAttempt(string,string,string,address)": TypedContractEvent<
      TokenCreationAttemptEvent.InputTuple,
      TokenCreationAttemptEvent.OutputTuple,
      TokenCreationAttemptEvent.OutputObject
    >;
    TokenCreationAttempt: TypedContractEvent<
      TokenCreationAttemptEvent.InputTuple,
      TokenCreationAttemptEvent.OutputTuple,
      TokenCreationAttemptEvent.OutputObject
    >;

    "TokenCreationError(int64,string)": TypedContractEvent<
      TokenCreationErrorEvent.InputTuple,
      TokenCreationErrorEvent.OutputTuple,
      TokenCreationErrorEvent.OutputObject
    >;
    TokenCreationError: TypedContractEvent<
      TokenCreationErrorEvent.InputTuple,
      TokenCreationErrorEvent.OutputTuple,
      TokenCreationErrorEvent.OutputObject
    >;

    "TokenCreationStep(string,address,int64)": TypedContractEvent<
      TokenCreationStepEvent.InputTuple,
      TokenCreationStepEvent.OutputTuple,
      TokenCreationStepEvent.OutputObject
    >;
    TokenCreationStep: TypedContractEvent<
      TokenCreationStepEvent.InputTuple,
      TokenCreationStepEvent.OutputTuple,
      TokenCreationStepEvent.OutputObject
    >;
  };
}
